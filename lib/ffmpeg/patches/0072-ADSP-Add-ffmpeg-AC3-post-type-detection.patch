From ac762fe501aa4da0ad8f3758c4d515f586cad5b4 Mon Sep 17 00:00:00 2001
From: Alwin Esch <alwin.esch@web.de>
Date: Mon, 3 Mar 2014 23:23:35 +0100
Subject: [PATCH] ADSP - Add ffmpeg AC3 post type detection

---
 lib/ffmpeg/libavcodec/ac3.h        |  1 +
 lib/ffmpeg/libavcodec/ac3_parser.c | 68 ++++++++++++++++++++++++++++++++++++--
 lib/ffmpeg/libavcodec/ac3dec.c     | 40 ++++++++++------------
 lib/ffmpeg/libavcodec/ac3dec.h     |  1 +
 lib/ffmpeg/libavcodec/avcodec.h    | 17 ++++++++++
 5 files changed, 102 insertions(+), 25 deletions(-)

diff --git a/lib/ffmpeg/libavcodec/ac3.h b/lib/ffmpeg/libavcodec/ac3.h
index e609bb5..aefeee4 100644
--- a/lib/ffmpeg/libavcodec/ac3.h
+++ b/lib/ffmpeg/libavcodec/ac3.h
@@ -110,6 +110,7 @@ typedef struct AC3HeaderInfo {
     int surround_mix_level;                 ///< Surround mix level index
     uint16_t channel_map;
     int num_blocks;                         ///< number of audio blocks
+    int profile;
     /** @} */
 
     /** @name Derived values
diff --git a/lib/ffmpeg/libavcodec/ac3_parser.c b/lib/ffmpeg/libavcodec/ac3_parser.c
index 8dc4c0d..0e10eb7 100644
--- a/lib/ffmpeg/libavcodec/ac3_parser.c
+++ b/lib/ffmpeg/libavcodec/ac3_parser.c
@@ -50,6 +50,7 @@ static const uint8_t surround_levels[4] = { 4, 6, 7, 6 };
 int avpriv_ac3_parse_header(GetBitContext *gbc, AC3HeaderInfo *hdr)
 {
     int frame_size_code;
+    int tmp;
 
     memset(hdr, 0, sizeof(*hdr));
 
@@ -83,9 +84,10 @@ int avpriv_ac3_parse_header(GetBitContext *gbc, AC3HeaderInfo *hdr)
 
         hdr->bitstream_mode = get_bits(gbc, 3);
         hdr->channel_mode = get_bits(gbc, 3);
+        hdr->profile = hdr->channel_mode;
 
-        if(hdr->channel_mode == AC3_CHMODE_STEREO) {
-            skip_bits(gbc, 2); // skip dsurmod
+        if((hdr->channel_mode == AC3_CHMODE_STEREO && get_bits(gbc, 2) == 2)) {
+            hdr->profile |= FF_PROFILE_AC3_WITH_SURROUND; // dsurmod
         } else {
             if((hdr->channel_mode & 1) && hdr->channel_mode != AC3_CHMODE_MONO)
                 hdr->  center_mix_level =   center_levels[get_bits(gbc, 2)];
@@ -93,6 +95,66 @@ int avpriv_ac3_parse_header(GetBitContext *gbc, AC3HeaderInfo *hdr)
                 hdr->surround_mix_level = surround_levels[get_bits(gbc, 2)];
         }
         hdr->lfe_on = get_bits1(gbc);
+        if (hdr->lfe_on)
+          hdr->profile |= FF_PROFILE_AC3_WITH_LFE;
+
+        skip_bits(gbc, 5);        // dialnorm
+        if (get_bits1(gbc)) {     // compre
+          skip_bits(gbc, 8);      // compr
+        }
+        if (get_bits1(gbc)) {     // langcode
+          skip_bits(gbc, 8);      // langcod
+        }
+        if (get_bits1(gbc)) {     // audprodie
+          skip_bits(gbc, 5);      // mixlevel
+          tmp = get_bits(gbc, 2); // roomtyp
+          tmp = 0;
+          if (tmp & 1)
+            hdr->profile |= FF_PROFILE_AC3_WITH_LARGE_ROOM;
+          else if (tmp & 2)
+            hdr->profile |= FF_PROFILE_AC3_WITH_SMALL_ROOM;
+        }
+
+        if (hdr->channel_mode == AC3_CHMODE_DUALMONO) {
+          skip_bits(gbc, 5);        // dialnorm2
+          if (get_bits1(gbc)) {     // compre2
+            skip_bits(gbc, 8);      // compr2
+          }
+          if (get_bits1(gbc)) {     // langcode2
+            skip_bits(gbc, 8);      // langcod2
+          }
+          if (get_bits1(gbc)) {     // audprodie2
+            skip_bits(gbc, 5);      // mixlevel2
+            skip_bits(gbc, 2);      // roomtyp2
+          }
+        }
+
+        skip_bits(gbc, 2);        // copyrightb + origbs
+
+        if (hdr->bitstream_id == 8) {
+          if (get_bits1(gbc))     // timecod1
+            skip_bits(gbc, 14);   // timecod1
+          if (get_bits1(gbc))     // timecod2
+            skip_bits(gbc, 14);   // timecod2
+        }
+        else if (hdr->bitstream_id == 6) {
+          if (get_bits1(gbc)) {   // xbsi1
+            skip_bits(gbc, 2);    // dmixmod
+            skip_bits(gbc, 3);    // ltrtcmixlev
+            skip_bits(gbc, 3);    // ltrtsurmixlev
+            skip_bits(gbc, 3);    // lorocmixlev
+            skip_bits(gbc, 3);    // lorosurmixlev
+          }
+          if (get_bits1(gbc)) {   // xbsi2e
+            if (get_bits(gbc, 2) == 0x02)   // dsurexmod
+              hdr->profile |= FF_PROFILE_AC3_WITH_DD_EX;
+            if (get_bits(gbc, 2) == 0x02)   // dheadphonemod
+              hdr->profile |= FF_PROFILE_AC3_WITH_DOLBY_HP;
+            skip_bits(gbc, 1);    // adconvtyp
+            skip_bits(gbc, 8);    // xbsi2
+            skip_bits(gbc, 1);    // encinfo
+          }
+        }
 
         hdr->sr_shift = FFMAX(hdr->bitstream_id, 8) - 8;
         hdr->sample_rate = ff_ac3_sample_rate_tab[hdr->sr_code] >> hdr->sr_shift;
@@ -152,7 +214,7 @@ static int ac3_sync(uint64_t state, AACAC3ParseContext *hdr_info,
     AC3HeaderInfo hdr;
     GetBitContext gbc;
 
-    init_get_bits(&gbc, tmp.u8+8-AC3_HEADER_SIZE, 54);
+    init_get_bits(&gbc, tmp.u8+8-AC3_HEADER_SIZE, 82);
     err = avpriv_ac3_parse_header(&gbc, &hdr);
 
     if(err < 0)
diff --git a/lib/ffmpeg/libavcodec/ac3dec.c b/lib/ffmpeg/libavcodec/ac3dec.c
index 51ef187..04c05ca 100644
--- a/lib/ffmpeg/libavcodec/ac3dec.c
+++ b/lib/ffmpeg/libavcodec/ac3dec.c
@@ -203,27 +203,6 @@ static int ac3_parse_header(AC3DecodeContext *s)
     GetBitContext *gbc = &s->gbc;
     int i;
 
-    /* read the rest of the bsi. read twice for dual mono mode. */
-    i = !s->channel_mode;
-    do {
-        skip_bits(gbc, 5); // skip dialog normalization
-        if (get_bits1(gbc))
-            skip_bits(gbc, 8); //skip compression
-        if (get_bits1(gbc))
-            skip_bits(gbc, 8); //skip language code
-        if (get_bits1(gbc))
-            skip_bits(gbc, 7); //skip audio production information
-    } while (i--);
-
-    skip_bits(gbc, 2); //skip copyright bit and original bitstream bit
-
-    /* skip the timecodes (or extra bitstream information for Alternate Syntax)
-       TODO: read & use the xbsi1 downmix levels */
-    if (get_bits1(gbc))
-        skip_bits(gbc, 14); //skip timecode1 / xbsi1
-    if (get_bits1(gbc))
-        skip_bits(gbc, 14); //skip timecode2 / xbsi2
-
     /* skip additional bitstream info */
     if (get_bits1(gbc)) {
         i = get_bits(gbc, 6);
@@ -265,6 +244,7 @@ static int parse_frame_header(AC3DecodeContext *s)
     s->num_blocks                   = hdr.num_blocks;
     s->frame_type                   = hdr.frame_type;
     s->substreamid                  = hdr.substreamid;
+    s->profile                      = hdr.profile;
 
     if (s->lfe_on) {
         s->start_freq[s->lfe_ch]     = 0;
@@ -1284,6 +1264,8 @@ static int ac3_decode_frame(AVCodecContext * avctx, void *data,
     /* initialize the GetBitContext with the start of valid AC-3 Frame */
     init_get_bits(&s->gbc, buf, buf_size * 8);
 
+    s->profile = FF_PROFILE_AC3;
+
     /* parse the syncinfo */
     err = parse_frame_header(s);
 
@@ -1336,6 +1318,7 @@ static int ac3_decode_frame(AVCodecContext * avctx, void *data,
     if (!err) {
         avctx->sample_rate = s->sample_rate;
         avctx->bit_rate    = s->bit_rate;
+        avctx->profile     = s->profile;
     }
 
     /* channel config */
@@ -1443,6 +1426,18 @@ static const AVOption options[] = {
     { NULL},
 };
 
+static const AVProfile profiles[] = {
+    { FF_PROFILE_AC3,                 "AC3"        },
+    { FF_PROFILE_AC3_WITH_LFE,        "AC3 with LFE"     },
+    { FF_PROFILE_AC3_WITH_SURROUND,   "AC3 Surround"  },
+    { FF_PROFILE_AC3_WITH_LARGE_ROOM, "AC3 Large Room" },
+    { FF_PROFILE_AC3_WITH_SMALL_ROOM, "AC3 Small Room"  },
+    { FF_PROFILE_AC3_CHANNELMODE,     "AC3 Channel Mode"  },
+    { FF_PROFILE_AC3_WITH_DD_EX,      "AC3 EX"  },
+    { FF_PROFILE_AC3_WITH_DOLBY_HP,   "AC3 HP"  },
+    { FF_PROFILE_UNKNOWN },
+};
+
 static const AVClass ac3_decoder_class = {
     .class_name = "AC3 decoder",
     .item_name  = av_default_item_name,
@@ -1458,11 +1453,12 @@ AVCodec ff_ac3_decoder = {
     .init           = ac3_decode_init,
     .close          = ac3_decode_end,
     .decode         = ac3_decode_frame,
-    .capabilities   = CODEC_CAP_DR1,
+    .capabilities   = CODEC_CAP_CHANNEL_CONF | CODEC_CAP_DR1,
     .long_name      = NULL_IF_CONFIG_SMALL("ATSC A/52A (AC-3)"),
     .sample_fmts    = (const enum AVSampleFormat[]) { AV_SAMPLE_FMT_FLTP,
                                                       AV_SAMPLE_FMT_NONE },
     .priv_class     = &ac3_decoder_class,
+    .profiles       = profiles,
 };
 
 #if CONFIG_EAC3_DECODER
diff --git a/lib/ffmpeg/libavcodec/ac3dec.h b/lib/ffmpeg/libavcodec/ac3dec.h
index 6c99ef6..e23b199 100644
--- a/lib/ffmpeg/libavcodec/ac3dec.h
+++ b/lib/ffmpeg/libavcodec/ac3dec.h
@@ -87,6 +87,7 @@ typedef struct AC3DecodeContext {
     int center_mix_level;                   ///< Center mix level index
     int surround_mix_level;                 ///< Surround mix level index
     int eac3;                               ///< indicates if current frame is E-AC-3
+    int profile;
 ///@}
 
     int preferred_stereo_downmix;
diff --git a/lib/ffmpeg/libavcodec/avcodec.h b/lib/ffmpeg/libavcodec/avcodec.h
index b20d129..7c39b0e 100644
--- a/lib/ffmpeg/libavcodec/avcodec.h
+++ b/lib/ffmpeg/libavcodec/avcodec.h
@@ -3114,6 +3114,23 @@ typedef struct AVCodecContext {
 #define FF_PROFILE_MPEG4_SIMPLE_STUDIO             14
 #define FF_PROFILE_MPEG4_ADVANCED_SIMPLE           15
 
+#define FF_PROFILE_AC3                              0
+#define FF_PROFILE_AC3_CHANNELMODE                  7
+#define FF_PROFILE_AC3_CHANNELMODE_CH1_CH2          0
+#define FF_PROFILE_AC3_CHANNELMODE_C                1
+#define FF_PROFILE_AC3_CHANNELMODE_L_R              2
+#define FF_PROFILE_AC3_CHANNELMODE_L_C_R            3
+#define FF_PROFILE_AC3_CHANNELMODE_L_R_S            4
+#define FF_PROFILE_AC3_CHANNELMODE_L_C_R_S          5
+#define FF_PROFILE_AC3_CHANNELMODE_L_R_SL_SR        6
+#define FF_PROFILE_AC3_CHANNELMODE_L_C_R_SL_SR      7
+#define FF_PROFILE_AC3_WITH_LFE                     8
+#define FF_PROFILE_AC3_WITH_SURROUND                16
+#define FF_PROFILE_AC3_WITH_LARGE_ROOM              32
+#define FF_PROFILE_AC3_WITH_SMALL_ROOM              64
+#define FF_PROFILE_AC3_WITH_DD_EX                   128
+#define FF_PROFILE_AC3_WITH_DOLBY_HP                256
+
     /**
      * level
      * - encoding: Set by user.
-- 
1.8.3.2

