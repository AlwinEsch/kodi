/*
 *  Copyright (C) 2005-2022 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#include "web.h"

// Shared API
#include "addons/kodi-dev-kit/src/shared/api/addon-instance/web.h"

// Kodi
#include "addons/interface/IOffscreenRenderProcess.h"
#include "addons/interface/RunningProcess.h"
#include "utils/log.h"
#include "web/WebAddon.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

namespace KODI
{
namespace ADDONS
{
namespace INTERFACE
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

void CHdl_kodi_addoninstance_web_h::InitDirect(directFuncToKodi_addoninstance_web_h* ifcToKodi,
                                               directFuncToAddon_addoninstance_web_h* ifcToAddon)
{
  ifcToKodi->thisClassHdl = this;
  m_ifcToAddon = ifcToAddon;
  ifcToKodi->kodi_addon_web_inhibit_shutdown_v1 = kodi_addon_web_inhibit_shutdown_v1;
  ifcToKodi->kodi_addon_web_inhibit_screensaver_v1 = kodi_addon_web_inhibit_screensaver_v1;
  ifcToKodi->kodi_addon_web_is_muted_v1 = kodi_addon_web_is_muted_v1;
  ifcToKodi->kodi_addon_web_control_set_control_ready_v1 =
      kodi_addon_web_control_set_control_ready_v1;
  ifcToKodi->kodi_addon_web_control_set_opened_address_v1 =
      kodi_addon_web_control_set_opened_address_v1;
  ifcToKodi->kodi_addon_web_control_set_opened_title_v1 =
      kodi_addon_web_control_set_opened_title_v1;
  ifcToKodi->kodi_addon_web_control_set_icon_url_v1 = kodi_addon_web_control_set_icon_url_v1;
  ifcToKodi->kodi_addon_web_control_set_fullscreen_v1 = kodi_addon_web_control_set_fullscreen_v1;
  ifcToKodi->kodi_addon_web_control_set_loading_state_v1 =
      kodi_addon_web_control_set_loading_state_v1;
  ifcToKodi->kodi_addon_web_control_set_tooltip_v1 = kodi_addon_web_control_set_tooltip_v1;
  ifcToKodi->kodi_addon_web_control_set_status_message_v1 =
      kodi_addon_web_control_set_status_message_v1;
  ifcToKodi->kodi_addon_web_control_request_open_site_in_new_tab_v1 =
      kodi_addon_web_control_request_open_site_in_new_tab_v1;
}

bool CHdl_kodi_addoninstance_web_h::HandleMessage(int funcGroup,
                                                  int func,
                                                  const msgpack::unpacked& in,
                                                  msgpack::sbuffer& out)
{
  if (funcGroup != funcGroup_addoninstance_web_h)
    return false;

  switch (func)
  {
    case funcParent_kodi_addon_web_inhibit_shutdown_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_addon_web_inhibit_shutdown(KODI_ADDON_INSTANCE_BACKEND_HDL hdl, bool inhibit); __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, bool> msgParent__IN_kodi_addon_web_inhibit_shutdown_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_web_inhibit_shutdown_v1; /* Autogenerated */
      msgParent__IN_kodi_addon_web_inhibit_shutdown_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_INSTANCE_BACKEND_HDL hdl =
          reinterpret_cast<KODI_ADDON_INSTANCE_BACKEND_HDL>(std::get<0>(t));
      bool inhibit = std::get<1>(t);
      kodi_addon_web_inhibit_shutdown_v1(this, hdl, inhibit);
      return true;
    }
    case funcParent_kodi_addon_web_inhibit_screensaver_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_addon_web_inhibit_screensaver(KODI_ADDON_INSTANCE_BACKEND_HDL hdl, bool inhibit); __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, bool> msgParent__IN_kodi_addon_web_inhibit_screensaver_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_web_inhibit_screensaver_v1; /* Autogenerated */
      msgParent__IN_kodi_addon_web_inhibit_screensaver_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_INSTANCE_BACKEND_HDL hdl =
          reinterpret_cast<KODI_ADDON_INSTANCE_BACKEND_HDL>(std::get<0>(t));
      bool inhibit = std::get<1>(t);
      kodi_addon_web_inhibit_screensaver_v1(this, hdl, inhibit);
      return true;
    }
    case funcParent_kodi_addon_web_is_muted_v1:
    {
      // Original API call: ATTR_DLL_EXPORT bool kodi_addon_web_is_muted(KODI_ADDON_INSTANCE_BACKEND_HDL hdl); __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_addon_web_is_muted_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgParent_OUT_kodi_addon_web_is_muted_v1; /* Autogenerated */
      msgParent__IN_kodi_addon_web_is_muted_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_INSTANCE_BACKEND_HDL hdl =
          reinterpret_cast<KODI_ADDON_INSTANCE_BACKEND_HDL>(std::get<0>(t));
      bool auto_gen_ret = kodi_addon_web_is_muted_v1(this, hdl);
      msgpack::pack(out, msgParent_OUT_kodi_addon_web_is_muted_v1(auto_gen_ret));
      return true;
    }
    case funcParent_kodi_addon_web_control_set_control_ready_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_addon_web_control_set_control_ready(KODI_ADDON_INSTANCE_BACKEND_HDL hdl, WEB_KODI_CONTROL handle, bool ready); __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, bool> msgParent__IN_kodi_addon_web_control_set_control_ready_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_web_control_set_control_ready_v1; /* Autogenerated */
      msgParent__IN_kodi_addon_web_control_set_control_ready_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_INSTANCE_BACKEND_HDL hdl =
          reinterpret_cast<KODI_ADDON_INSTANCE_BACKEND_HDL>(std::get<0>(t));
      WEB_KODI_CONTROL handle = reinterpret_cast<WEB_KODI_CONTROL>(std::get<1>(t));
      bool ready = std::get<2>(t);
      kodi_addon_web_control_set_control_ready_v1(this, hdl, handle, ready);
      return true;
    }
    case funcParent_kodi_addon_web_control_set_opened_address_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_addon_web_control_set_opened_address(KODI_ADDON_INSTANCE_BACKEND_HDL hdl, WEB_KODI_CONTROL handle, const char* title); __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, std::string> msgParent__IN_kodi_addon_web_control_set_opened_address_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_web_control_set_opened_address_v1; /* Autogenerated */
      msgParent__IN_kodi_addon_web_control_set_opened_address_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_INSTANCE_BACKEND_HDL hdl =
          reinterpret_cast<KODI_ADDON_INSTANCE_BACKEND_HDL>(std::get<0>(t));
      WEB_KODI_CONTROL handle = reinterpret_cast<WEB_KODI_CONTROL>(std::get<1>(t));
      const std::string& title = std::get<2>(t);
      kodi_addon_web_control_set_opened_address_v1(this, hdl, handle, title.c_str());
      return true;
    }
    case funcParent_kodi_addon_web_control_set_opened_title_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_addon_web_control_set_opened_title(KODI_ADDON_INSTANCE_BACKEND_HDL hdl, WEB_KODI_CONTROL handle, const char* title); __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, std::string> msgParent__IN_kodi_addon_web_control_set_opened_title_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_web_control_set_opened_title_v1; /* Autogenerated */
      msgParent__IN_kodi_addon_web_control_set_opened_title_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_INSTANCE_BACKEND_HDL hdl =
          reinterpret_cast<KODI_ADDON_INSTANCE_BACKEND_HDL>(std::get<0>(t));
      WEB_KODI_CONTROL handle = reinterpret_cast<WEB_KODI_CONTROL>(std::get<1>(t));
      const std::string& title = std::get<2>(t);
      kodi_addon_web_control_set_opened_title_v1(this, hdl, handle, title.c_str());
      return true;
    }
    case funcParent_kodi_addon_web_control_set_icon_url_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_addon_web_control_set_icon_url(KODI_ADDON_INSTANCE_BACKEND_HDL hdl, WEB_KODI_CONTROL handle, const char* icon); __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, std::string> msgParent__IN_kodi_addon_web_control_set_icon_url_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_web_control_set_icon_url_v1; /* Autogenerated */
      msgParent__IN_kodi_addon_web_control_set_icon_url_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_INSTANCE_BACKEND_HDL hdl =
          reinterpret_cast<KODI_ADDON_INSTANCE_BACKEND_HDL>(std::get<0>(t));
      WEB_KODI_CONTROL handle = reinterpret_cast<WEB_KODI_CONTROL>(std::get<1>(t));
      const std::string& icon = std::get<2>(t);
      kodi_addon_web_control_set_icon_url_v1(this, hdl, handle, icon.c_str());
      return true;
    }
    case funcParent_kodi_addon_web_control_set_fullscreen_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_addon_web_control_set_fullscreen(KODI_ADDON_INSTANCE_BACKEND_HDL hdl, WEB_KODI_CONTROL handle, bool fullscreen); __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, bool> msgParent__IN_kodi_addon_web_control_set_fullscreen_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_web_control_set_fullscreen_v1; /* Autogenerated */
      msgParent__IN_kodi_addon_web_control_set_fullscreen_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_INSTANCE_BACKEND_HDL hdl =
          reinterpret_cast<KODI_ADDON_INSTANCE_BACKEND_HDL>(std::get<0>(t));
      WEB_KODI_CONTROL handle = reinterpret_cast<WEB_KODI_CONTROL>(std::get<1>(t));
      bool fullscreen = std::get<2>(t);
      kodi_addon_web_control_set_fullscreen_v1(this, hdl, handle, fullscreen);
      return true;
    }
    case funcParent_kodi_addon_web_control_set_loading_state_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_addon_web_control_set_loading_state(KODI_ADDON_INSTANCE_BACKEND_HDL hdl, WEB_KODI_CONTROL handle, bool isLoading, bool canGoBack, bool canGoForward); __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, bool, bool, bool> msgParent__IN_kodi_addon_web_control_set_loading_state_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_web_control_set_loading_state_v1; /* Autogenerated */
      msgParent__IN_kodi_addon_web_control_set_loading_state_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_INSTANCE_BACKEND_HDL hdl =
          reinterpret_cast<KODI_ADDON_INSTANCE_BACKEND_HDL>(std::get<0>(t));
      WEB_KODI_CONTROL handle = reinterpret_cast<WEB_KODI_CONTROL>(std::get<1>(t));
      bool isLoading = std::get<2>(t);
      bool canGoBack = std::get<3>(t);
      bool canGoForward = std::get<4>(t);
      kodi_addon_web_control_set_loading_state_v1(this, hdl, handle, isLoading, canGoBack,
                                                  canGoForward);
      return true;
    }
    case funcParent_kodi_addon_web_control_set_tooltip_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_addon_web_control_set_tooltip(KODI_ADDON_INSTANCE_BACKEND_HDL hdl, WEB_KODI_CONTROL handle, const char* tooltip); __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, std::string> msgParent__IN_kodi_addon_web_control_set_tooltip_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_web_control_set_tooltip_v1; /* Autogenerated */
      msgParent__IN_kodi_addon_web_control_set_tooltip_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_INSTANCE_BACKEND_HDL hdl =
          reinterpret_cast<KODI_ADDON_INSTANCE_BACKEND_HDL>(std::get<0>(t));
      WEB_KODI_CONTROL handle = reinterpret_cast<WEB_KODI_CONTROL>(std::get<1>(t));
      const std::string& tooltip = std::get<2>(t);
      kodi_addon_web_control_set_tooltip_v1(this, hdl, handle, tooltip.c_str());
      return true;
    }
    case funcParent_kodi_addon_web_control_set_status_message_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_addon_web_control_set_status_message(KODI_ADDON_INSTANCE_BACKEND_HDL hdl, WEB_KODI_CONTROL handle, const char* status); __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, std::string> msgParent__IN_kodi_addon_web_control_set_status_message_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_web_control_set_status_message_v1; /* Autogenerated */
      msgParent__IN_kodi_addon_web_control_set_status_message_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_INSTANCE_BACKEND_HDL hdl =
          reinterpret_cast<KODI_ADDON_INSTANCE_BACKEND_HDL>(std::get<0>(t));
      WEB_KODI_CONTROL handle = reinterpret_cast<WEB_KODI_CONTROL>(std::get<1>(t));
      const std::string& status = std::get<2>(t);
      kodi_addon_web_control_set_status_message_v1(this, hdl, handle, status.c_str());
      return true;
    }
    case funcParent_kodi_addon_web_control_request_open_site_in_new_tab_v1:
    {
      // Original API call: ATTR_DLL_EXPORT void kodi_addon_web_control_request_open_site_in_new_tab(KODI_ADDON_INSTANCE_BACKEND_HDL hdl, WEB_KODI_CONTROL handle, const char* url); __INTRODUCED_IN_KODI(1);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, std::string> msgParent__IN_kodi_addon_web_control_request_open_site_in_new_tab_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_web_control_request_open_site_in_new_tab_v1; /* Autogenerated */
      msgParent__IN_kodi_addon_web_control_request_open_site_in_new_tab_v1 t =
          in.get().as<decltype(t)>();
      KODI_ADDON_INSTANCE_BACKEND_HDL hdl =
          reinterpret_cast<KODI_ADDON_INSTANCE_BACKEND_HDL>(std::get<0>(t));
      WEB_KODI_CONTROL handle = reinterpret_cast<WEB_KODI_CONTROL>(std::get<1>(t));
      const std::string& url = std::get<2>(t);
      kodi_addon_web_control_request_open_site_in_new_tab_v1(this, hdl, handle, url.c_str());
      return true;
    }
    default:
      CLog::Log(LOGERROR,
                "CHdl_kodi_addoninstance_web_h::{}: addon called with unknown function id '{}' on "
                "group 'addoninstance_web_h'",
                __func__, func);
  }

  return false;
}

// Function calls from Kodi to addon

enum WEB_ADDON_ERROR CHdl_kodi_addoninstance_web_h::kodi_addon_web_start_instance_v1(
    const KODI_ADDON_WEB_HDL hdl)
{
  // Original API call: typedef enum WEB_ADDON_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_START_INSTANCE_V1)(const KODI_ADDON_WEB_HDL hdl);
  // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_web_start_instance_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<WEB_ADDON_ERROR> msgChild_OUT_kodi_addon_web_start_instance_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_web_start_instance_v1(PtrValue(hdl)));
    if (!m_process->SendMessage(funcGroup_addoninstance_web_h,
                                funcChild_kodi_addon_web_start_instance_v1, in, out))
      return WEB_ADDON_ERROR_PERMANENT_FAILED;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_web_start_instance_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_web_start_instance_v1(m_ifcToAddon->thisClassHdl, hdl);
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_stop_instance_v1(const KODI_ADDON_WEB_HDL hdl)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_STOP_INSTANCE_V1)(const KODI_ADDON_WEB_HDL hdl);
  // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_web_stop_instance_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_web_stop_instance_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgChild__IN_kodi_addon_web_stop_instance_v1(PtrValue(hdl)));
    m_process->SendMessage(funcGroup_addoninstance_web_h, funcChild_kodi_addon_web_stop_instance_v1,
                           in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  m_ifcToAddon->kodi_addon_web_stop_instance_v1(m_ifcToAddon->thisClassHdl, hdl);
}

bool CHdl_kodi_addoninstance_web_h::kodi_addon_web_main_initialize_v1(const KODI_ADDON_WEB_HDL hdl)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_MAIN_INITIALIZE_V1)(const KODI_ADDON_WEB_HDL hdl);
  // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_web_main_initialize_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_web_main_initialize_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_web_main_initialize_v1(PtrValue(hdl)));
    if (!m_process->SendMessage(funcGroup_addoninstance_web_h,
                                funcChild_kodi_addon_web_main_initialize_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_web_main_initialize_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_web_main_initialize_v1(m_ifcToAddon->thisClassHdl, hdl);
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_main_loop_v1(const KODI_ADDON_WEB_HDL hdl)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_MAIN_LOOP_V1)(const KODI_ADDON_WEB_HDL hdl);
  // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_web_main_loop_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_web_main_loop_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgChild__IN_kodi_addon_web_main_loop_v1(PtrValue(hdl)));
    m_process->SendMessage(funcGroup_addoninstance_web_h, funcChild_kodi_addon_web_main_loop_v1,
                           in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  m_ifcToAddon->kodi_addon_web_main_loop_v1(m_ifcToAddon->thisClassHdl, hdl);
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_main_shutdown_v1(const KODI_ADDON_WEB_HDL hdl)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_MAIN_SHUTDOWN_V1)(const KODI_ADDON_WEB_HDL hdl);
  // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_web_main_shutdown_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_web_main_shutdown_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgChild__IN_kodi_addon_web_main_shutdown_v1(PtrValue(hdl)));
    m_process->SendMessage(funcGroup_addoninstance_web_h, funcChild_kodi_addon_web_main_shutdown_v1,
                           in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  m_ifcToAddon->kodi_addon_web_main_shutdown_v1(m_ifcToAddon->thisClassHdl, hdl);
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_set_mute_v1(const KODI_ADDON_WEB_HDL hdl,
                                                               bool mute)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_SET_MUTE_V1)(const KODI_ADDON_WEB_HDL hdl, bool mute);
  // Tuple in:          typedef std::tuple<PtrValue, bool> msgChild__IN_kodi_addon_web_set_mute_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_web_set_mute_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgChild__IN_kodi_addon_web_set_mute_v1(PtrValue(hdl), mute));
    m_process->SendMessage(funcGroup_addoninstance_web_h, funcChild_kodi_addon_web_set_mute_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  m_ifcToAddon->kodi_addon_web_set_mute_v1(m_ifcToAddon->thisClassHdl, hdl, mute);
}

bool CHdl_kodi_addoninstance_web_h::kodi_addon_web_set_language_v1(const KODI_ADDON_WEB_HDL hdl,
                                                                   const char* language)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_SET_LANGUAGE_V1)(const KODI_ADDON_WEB_HDL hdl, const char* language);
  // Tuple in:          typedef std::tuple<PtrValue, std::string> msgChild__IN_kodi_addon_web_set_language_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_web_set_language_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_web_set_language_v1(PtrValue(hdl), language));
    if (!m_process->SendMessage(funcGroup_addoninstance_web_h,
                                funcChild_kodi_addon_web_set_language_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_web_set_language_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_web_set_language_v1(m_ifcToAddon->thisClassHdl, hdl, language);
}

enum WEB_ADDON_ERROR CHdl_kodi_addoninstance_web_h::kodi_addon_web_create_control_v1(
    const KODI_ADDON_WEB_HDL hdl,
    const struct WEB_ADDON_GUI_PROPS* props,
    const char* start_url,
    WEB_KODI_CONTROL* handle)
{
  // Original API call: typedef enum WEB_ADDON_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CREATE_CONTROL_V1)(const KODI_ADDON_WEB_HDL hdl, const struct WEB_ADDON_GUI_PROPS* props, const char* start_url, WEB_KODI_CONTROL* handle);
  // Tuple in:          typedef std::tuple<PtrValue, IFC_WEB_ADDON_GUI_PROPS, std::string> msgChild__IN_kodi_addon_web_create_control_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<WEB_ADDON_ERROR, PtrValue> msgChild_OUT_kodi_addon_web_create_control_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in,
                  msgChild__IN_kodi_addon_web_create_control_v1(PtrValue(hdl), props, start_url));
    if (!m_process->SendMessage(funcGroup_addoninstance_web_h,
                                funcChild_kodi_addon_web_create_control_v1, in, out))
      return WEB_ADDON_ERROR_PERMANENT_FAILED;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_web_create_control_v1 t = ident.get().as<decltype(t)>();
    *handle = reinterpret_cast<WEB_KODI_CONTROL>(std::get<1>(t));
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_web_create_control_v1(m_ifcToAddon->thisClassHdl, hdl, props,
                                                        start_url, handle);
}

enum WEB_ADDON_ERROR CHdl_kodi_addoninstance_web_h::kodi_addon_web_destroy_control_v1(
    const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle, bool complete)
{
  // Original API call: typedef enum WEB_ADDON_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_DESTROY_CONTROL_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle, bool complete);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, bool> msgChild__IN_kodi_addon_web_destroy_control_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<WEB_ADDON_ERROR> msgChild_OUT_kodi_addon_web_destroy_control_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_web_destroy_control_v1(PtrValue(hdl),
                                                                     PtrValue(handle), complete));
    if (!m_process->SendMessage(funcGroup_addoninstance_web_h,
                                funcChild_kodi_addon_web_destroy_control_v1, in, out))
      return WEB_ADDON_ERROR_PERMANENT_FAILED;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_web_destroy_control_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_web_destroy_control_v1(m_ifcToAddon->thisClassHdl, hdl, handle,
                                                         complete);
}

bool CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_render_init_v1(
    IOffscreenRenderProcess* proc, const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_RENDER_INIT_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle);
  // Tuple in:          typedef std::tuple<PtrKodiOffscreen, uint64_t, int, int, int, int, PtrValue /* < Offscreen render */, PtrValue, PtrValue> msgChild__IN_kodi_addon_web_control_render_init_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool, PtrAddonOffscreen, bool /* < Offscreen render */> msgChild_OUT_kodi_addon_web_control_render_init_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    int x = 0;
    int y = 0;
    int width = 0;
    int height = 0;
    ADDON_HARDWARE_CONTEXT context = nullptr;
    if (!proc || !proc->GetOffscreenRenderInfos(x, y, width, height, context) ||
        !proc->CreateRenderHelper(m_process))
      return false;

    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_web_control_render_init_v1(
                          PtrKodiOffscreen(proc), proc->GetUsedId(), x, y, width, height,
                          PtrValue(context), PtrValue(hdl), PtrValue(handle)));
    if (!m_process->SendMessage(funcGroup_addoninstance_web_h,
                                funcChild_kodi_addon_web_control_render_init_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_web_control_render_init_v1 t = ident.get().as<decltype(t)>();
    if (std::get<1>(t) == 0 || std::get<2>(t) == false)
      return false;
    proc->SetAddonOffscreenHdl(std::get<1>(t));
    proc->GetRenderHelper()->Init();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_web_control_render_init_v1(m_ifcToAddon->thisClassHdl, hdl,
                                                             handle);
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_render_deinit_v1(
    IOffscreenRenderProcess* proc, const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_RENDER_DEINIT_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle);
  // Tuple in:          typedef std::tuple<PtrAddonOffscreen /* < Offscreen render */, PtrValue, PtrValue> msgChild__IN_kodi_addon_web_control_render_deinit_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_web_control_render_deinit_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    if (!proc)
      return;

    msgpack::sbuffer in;
    msgpack::pack(in, msgChild__IN_kodi_addon_web_control_render_deinit_v1(
                          proc->GetAddonOffscreenHdl(), PtrValue(hdl), PtrValue(handle)));
    m_process->SendMessage(funcGroup_addoninstance_web_h,
                           funcChild_kodi_addon_web_control_render_deinit_v1, in);

    proc->GetRenderHelper()->Deinit();
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  m_ifcToAddon->kodi_addon_web_control_render_deinit_v1(m_ifcToAddon->thisClassHdl, hdl, handle);
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_render_v1(IOffscreenRenderProcess* proc,
                                                                     const KODI_ADDON_WEB_HDL hdl,
                                                                     const WEB_KODI_CONTROL handle)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_RENDER_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle);
  // Tuple in:          typedef std::tuple<PtrAddonOffscreen /* < Offscreen render */, PtrValue, PtrValue> msgChild__IN_kodi_addon_web_control_render_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_web_control_render_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    if (!proc)
      return;

    proc->GetRenderHelper()->Begin();

    msgpack::sbuffer in;
    msgpack::pack(in, msgChild__IN_kodi_addon_web_control_render_v1(
                          proc->GetAddonOffscreenHdl(), PtrValue(hdl), PtrValue(handle)));
    m_process->SendMessage(funcGroup_addoninstance_web_h,
                           funcChild_kodi_addon_web_control_render_v1, in);

    proc->GetRenderHelper()->End();
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  m_ifcToAddon->kodi_addon_web_control_render_v1(m_ifcToAddon->thisClassHdl, hdl, handle);
}

bool CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_dirty_v1(const KODI_ADDON_WEB_HDL hdl,
                                                                    const WEB_KODI_CONTROL handle)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_DIRTY_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_web_control_dirty_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_web_control_dirty_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in,
                  msgChild__IN_kodi_addon_web_control_dirty_v1(PtrValue(hdl), PtrValue(handle)));
    if (!m_process->SendMessage(funcGroup_addoninstance_web_h,
                                funcChild_kodi_addon_web_control_dirty_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_web_control_dirty_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_web_control_dirty_v1(m_ifcToAddon->thisClassHdl, hdl, handle);
}

bool CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_on_init_v1(const KODI_ADDON_WEB_HDL hdl,
                                                                      const WEB_KODI_CONTROL handle)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_ON_INIT_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_web_control_on_init_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_web_control_on_init_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in,
                  msgChild__IN_kodi_addon_web_control_on_init_v1(PtrValue(hdl), PtrValue(handle)));
    if (!m_process->SendMessage(funcGroup_addoninstance_web_h,
                                funcChild_kodi_addon_web_control_on_init_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_web_control_on_init_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_web_control_on_init_v1(m_ifcToAddon->thisClassHdl, hdl, handle);
}

bool CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_on_action_v1(
    const KODI_ADDON_WEB_HDL hdl,
    const WEB_KODI_CONTROL handle,
    const struct KODI_ADDON_ACTION_DATA* action,
    int* nextItem)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_ON_ACTION_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle, const struct KODI_ADDON_ACTION_DATA* action, int* nextItem);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, IFC_KODI_ADDON_ACTION_DATA, int> msgChild__IN_kodi_addon_web_control_on_action_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool, int> msgChild_OUT_kodi_addon_web_control_on_action_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_web_control_on_action_v1(
                          PtrValue(hdl), PtrValue(handle), action, *nextItem));
    if (!m_process->SendMessage(funcGroup_addoninstance_web_h,
                                funcChild_kodi_addon_web_control_on_action_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_web_control_on_action_v1 t = ident.get().as<decltype(t)>();
    *nextItem = std::get<1>(t);
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_web_control_on_action_v1(m_ifcToAddon->thisClassHdl, hdl, handle,
                                                           action, nextItem);
}

bool CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_on_mouse_event_v1(
    const KODI_ADDON_WEB_HDL hdl,
    const WEB_KODI_CONTROL handle,
    int id,
    double x,
    double y,
    double offsetX,
    double offsetY,
    int state)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_ON_MOUSE_EVENT_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle, int id, double x, double y, double offsetX, double offsetY, int state);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, int, double, double, double, double, int> msgChild__IN_kodi_addon_web_control_on_mouse_event_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_web_control_on_mouse_event_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_web_control_on_mouse_event_v1(
                          PtrValue(hdl), PtrValue(handle), id, x, y, offsetX, offsetY, state));
    if (!m_process->SendMessage(funcGroup_addoninstance_web_h,
                                funcChild_kodi_addon_web_control_on_mouse_event_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_web_control_on_mouse_event_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_web_control_on_mouse_event_v1(
      m_ifcToAddon->thisClassHdl, hdl, handle, id, x, y, offsetX, offsetY, state);
}

bool CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_open_website_v1(
    const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle, const char* url)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_OPEN_WEBSITE_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle, const char* url);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, std::string> msgChild__IN_kodi_addon_web_control_open_website_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_web_control_open_website_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_web_control_open_website_v1(PtrValue(hdl),
                                                                          PtrValue(handle), url));
    if (!m_process->SendMessage(funcGroup_addoninstance_web_h,
                                funcChild_kodi_addon_web_control_open_website_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_web_control_open_website_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_web_control_open_website_v1(m_ifcToAddon->thisClassHdl, hdl,
                                                              handle, url);
}

bool CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_get_history_v1(
    const KODI_ADDON_WEB_HDL hdl,
    const WEB_KODI_CONTROL handle,
    char*** list,
    size_t* entries,
    bool behind_current)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_GET_HISTORY_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle, char*** list, size_t* entries, bool behind_current);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, size_t, bool> msgChild__IN_kodi_addon_web_control_get_history_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool, std::vector<std::string>, size_t> msgChild_OUT_kodi_addon_web_control_get_history_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_web_control_get_history_v1(
                          PtrValue(hdl), PtrValue(handle), *entries, behind_current));
    if (!m_process->SendMessage(funcGroup_addoninstance_web_h,
                                funcChild_kodi_addon_web_control_get_history_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_web_control_get_history_v1 t = ident.get().as<decltype(t)>();
    const std::vector<std::string>& cpp_list = std::get<1>(t);

    *entries = std::get<2>(t);
    assert(cpp_list.size() == *entries);
    if (!cpp_list.empty())
    {
      *list = static_cast<char**>(malloc(*entries * sizeof(char*)));
      for (size_t i = 0; i < *entries; ++i)
        (*list)[i] = strdup(cpp_list[i].c_str());
    }
    else
    {
      *list = nullptr;
    }
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_web_control_get_history_v1(m_ifcToAddon->thisClassHdl, hdl,
                                                             handle, list, entries, behind_current);
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_search_text_v1(
    const KODI_ADDON_WEB_HDL hdl,
    const WEB_KODI_CONTROL handle,
    const char* text,
    bool forward,
    bool matchCase,
    bool findNext)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_SEARCH_TEXT_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle, const char* text, bool forward, bool matchCase, bool findNext);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, std::string, bool, bool, bool> msgChild__IN_kodi_addon_web_control_search_text_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_web_control_search_text_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgChild__IN_kodi_addon_web_control_search_text_v1(
                          PtrValue(hdl), PtrValue(handle), text, forward, matchCase, findNext));
    m_process->SendMessage(funcGroup_addoninstance_web_h,
                           funcChild_kodi_addon_web_control_search_text_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  m_ifcToAddon->kodi_addon_web_control_search_text_v1(m_ifcToAddon->thisClassHdl, hdl, handle, text,
                                                      forward, matchCase, findNext);
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_stop_search_v1(
    const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle, bool clearSelection)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_STOP_SEARCH_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle, bool clearSelection);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, bool> msgChild__IN_kodi_addon_web_control_stop_search_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_web_control_stop_search_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgChild__IN_kodi_addon_web_control_stop_search_v1(
                          PtrValue(hdl), PtrValue(handle), clearSelection));
    m_process->SendMessage(funcGroup_addoninstance_web_h,
                           funcChild_kodi_addon_web_control_stop_search_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  m_ifcToAddon->kodi_addon_web_control_stop_search_v1(m_ifcToAddon->thisClassHdl, hdl, handle,
                                                      clearSelection);
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_web_cmd_reload_v1(
    const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_WEB_CMD_RELOAD_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_web_control_web_cmd_reload_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_web_control_web_cmd_reload_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::pack(
        in, msgChild__IN_kodi_addon_web_control_web_cmd_reload_v1(PtrValue(hdl), PtrValue(handle)));
    m_process->SendMessage(funcGroup_addoninstance_web_h,
                           funcChild_kodi_addon_web_control_web_cmd_reload_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  m_ifcToAddon->kodi_addon_web_control_web_cmd_reload_v1(m_ifcToAddon->thisClassHdl, hdl, handle);
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_web_cmd_stop_load_v1(
    const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_WEB_CMD_STOP_LOAD_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_web_control_web_cmd_stop_load_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_web_control_web_cmd_stop_load_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgChild__IN_kodi_addon_web_control_web_cmd_stop_load_v1(PtrValue(hdl),
                                                                               PtrValue(handle)));
    m_process->SendMessage(funcGroup_addoninstance_web_h,
                           funcChild_kodi_addon_web_control_web_cmd_stop_load_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  m_ifcToAddon->kodi_addon_web_control_web_cmd_stop_load_v1(m_ifcToAddon->thisClassHdl, hdl,
                                                            handle);
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_web_cmd_nav_back_v1(
    const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_WEB_CMD_NAV_BACK_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_web_control_web_cmd_nav_back_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_web_control_web_cmd_nav_back_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgChild__IN_kodi_addon_web_control_web_cmd_nav_back_v1(PtrValue(hdl),
                                                                              PtrValue(handle)));
    m_process->SendMessage(funcGroup_addoninstance_web_h,
                           funcChild_kodi_addon_web_control_web_cmd_nav_back_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  m_ifcToAddon->kodi_addon_web_control_web_cmd_nav_back_v1(m_ifcToAddon->thisClassHdl, hdl, handle);
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_web_cmd_nav_forward_v1(
    const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_WEB_CMD_NAV_FORWARD_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_web_control_web_cmd_nav_forward_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_web_control_web_cmd_nav_forward_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgChild__IN_kodi_addon_web_control_web_cmd_nav_forward_v1(PtrValue(hdl),
                                                                                 PtrValue(handle)));
    m_process->SendMessage(funcGroup_addoninstance_web_h,
                           funcChild_kodi_addon_web_control_web_cmd_nav_forward_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  m_ifcToAddon->kodi_addon_web_control_web_cmd_nav_forward_v1(m_ifcToAddon->thisClassHdl, hdl,
                                                              handle);
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_web_open_own_context_menu_v1(
    const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_WEB_OPEN_OWN_CONTEXT_MENU_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_web_control_web_open_own_context_menu_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_web_control_web_open_own_context_menu_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgChild__IN_kodi_addon_web_control_web_open_own_context_menu_v1(
                          PtrValue(hdl), PtrValue(handle)));
    m_process->SendMessage(funcGroup_addoninstance_web_h,
                           funcChild_kodi_addon_web_control_web_open_own_context_menu_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  m_ifcToAddon->kodi_addon_web_control_web_open_own_context_menu_v1(m_ifcToAddon->thisClassHdl, hdl,
                                                                    handle);
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_screen_size_change_v1(
    const KODI_ADDON_WEB_HDL hdl,
    const WEB_KODI_CONTROL handle,
    float x,
    float y,
    float width,
    float height,
    bool fullscreen)
{
  // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_SCREEN_SIZE_CHANGE_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle, float x, float y, float width, float height, bool fullscreen);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, float, float, float, float, bool> msgChild__IN_kodi_addon_web_control_screen_size_change_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_web_control_screen_size_change_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgChild__IN_kodi_addon_web_control_screen_size_change_v1(
                          PtrValue(hdl), PtrValue(handle), x, y, width, height, fullscreen));
    m_process->SendMessage(funcGroup_addoninstance_web_h,
                           funcChild_kodi_addon_web_control_screen_size_change_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  m_ifcToAddon->kodi_addon_web_control_screen_size_change_v1(
      m_ifcToAddon->thisClassHdl, hdl, handle, x, y, width, height, fullscreen);
}

// Callbacks from addon to Kodi

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_inhibit_shutdown_v1(
    void* thisClassHdl, KODI_ADDON_INSTANCE_BACKEND_HDL hdl, bool inhibit)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_WEB_INHIBIT_SHUTDOWN>---*/
  // AUTOGENERATED - Used by class "KODI::WEB::CWebAddon" with "void cb_inhibit_shutdown(bool inhibit)" on "web/WebAddon.h".

  KODI::WEB::CWebAddon* cb = static_cast<KODI::WEB::CWebAddon*>(hdl);
  cb->cb_inhibit_shutdown(inhibit);
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_WEB_INHIBIT_SHUTDOWN_END>---*/
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_inhibit_screensaver_v1(
    void* thisClassHdl, KODI_ADDON_INSTANCE_BACKEND_HDL hdl, bool inhibit)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_WEB_INHIBIT_SCREENSAVER>---*/
  // AUTOGENERATED - Used by class "KODI::WEB::CWebAddon" with "void cb_inhibit_screensaver(bool inhibit)" on "web/WebAddon.h".

  KODI::WEB::CWebAddon* cb = static_cast<KODI::WEB::CWebAddon*>(hdl);
  cb->cb_inhibit_screensaver(inhibit);
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_WEB_INHIBIT_SCREENSAVER_END>---*/
}

bool CHdl_kodi_addoninstance_web_h::kodi_addon_web_is_muted_v1(void* thisClassHdl,
                                                               KODI_ADDON_INSTANCE_BACKEND_HDL hdl)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_WEB_IS_MUTED>---*/
  // AUTOGENERATED - Used by class "KODI::WEB::CWebAddon" with "bool cb_is_muted()" on "web/WebAddon.h".

  KODI::WEB::CWebAddon* cb = static_cast<KODI::WEB::CWebAddon*>(hdl);
  return cb->cb_is_muted();
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_WEB_IS_MUTED_END>---*/
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_set_control_ready_v1(
    void* thisClassHdl, KODI_ADDON_INSTANCE_BACKEND_HDL hdl, WEB_KODI_CONTROL handle, bool ready)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_WEB_CONTROL_SET_CONTROL_READY>---*/
  // AUTOGENERATED - Used by class "KODI::WEB::CWebAddon" with "void cb_control_set_control_ready(WEB_KODI_CONTROL handle, bool ready)" on "web/WebAddon.h".

  KODI::WEB::CWebAddon* cb = static_cast<KODI::WEB::CWebAddon*>(hdl);
  cb->cb_control_set_control_ready(handle, ready);
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_WEB_CONTROL_SET_CONTROL_READY_END>---*/
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_set_opened_address_v1(
    void* thisClassHdl,
    KODI_ADDON_INSTANCE_BACKEND_HDL hdl,
    WEB_KODI_CONTROL handle,
    const char* title)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_WEB_CONTROL_SET_OPENED_ADDRESS>---*/
  // AUTOGENERATED - Used by class "KODI::WEB::CWebAddon" with "void cb_control_set_opened_address(WEB_KODI_CONTROL handle, const char* address)" on "web/WebAddon.h".

  KODI::WEB::CWebAddon* cb = static_cast<KODI::WEB::CWebAddon*>(hdl);
  cb->cb_control_set_opened_address(handle, title);
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_WEB_CONTROL_SET_OPENED_ADDRESS_END>---*/
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_set_opened_title_v1(
    void* thisClassHdl,
    KODI_ADDON_INSTANCE_BACKEND_HDL hdl,
    WEB_KODI_CONTROL handle,
    const char* title)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_WEB_CONTROL_SET_OPENED_TITLE>---*/
  // AUTOGENERATED - Used by class "KODI::WEB::CWebAddon" with "void cb_control_set_opened_title(WEB_KODI_CONTROL handle, const char* title)" on "web/WebAddon.h".

  KODI::WEB::CWebAddon* cb = static_cast<KODI::WEB::CWebAddon*>(hdl);
  cb->cb_control_set_opened_title(handle, title);
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_WEB_CONTROL_SET_OPENED_TITLE_END>---*/
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_set_icon_url_v1(
    void* thisClassHdl,
    KODI_ADDON_INSTANCE_BACKEND_HDL hdl,
    WEB_KODI_CONTROL handle,
    const char* icon)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_WEB_CONTROL_SET_ICON_URL>---*/
  // AUTOGENERATED - Used by class "KODI::WEB::CWebAddon" with "void cb_control_set_icon_url(WEB_KODI_CONTROL handle, const char* icon)" on "web/WebAddon.h".

  KODI::WEB::CWebAddon* cb = static_cast<KODI::WEB::CWebAddon*>(hdl);
  cb->cb_control_set_icon_url(handle, icon);
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_WEB_CONTROL_SET_ICON_URL_END>---*/
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_set_fullscreen_v1(
    void* thisClassHdl,
    KODI_ADDON_INSTANCE_BACKEND_HDL hdl,
    WEB_KODI_CONTROL handle,
    bool fullscreen)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_WEB_CONTROL_SET_FULLSCREEN>---*/
  // AUTOGENERATED - Used by class "KODI::WEB::CWebAddon" with "void cb_control_set_fullscreen(WEB_KODI_CONTROL handle, bool fullscreen)" on "web/WebAddon.h".

  KODI::WEB::CWebAddon* cb = static_cast<KODI::WEB::CWebAddon*>(hdl);
  cb->cb_control_set_fullscreen(handle, fullscreen);
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_WEB_CONTROL_SET_FULLSCREEN_END>---*/
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_set_loading_state_v1(
    void* thisClassHdl,
    KODI_ADDON_INSTANCE_BACKEND_HDL hdl,
    WEB_KODI_CONTROL handle,
    bool isLoading,
    bool canGoBack,
    bool canGoForward)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_WEB_CONTROL_SET_LOADING_STATE>---*/
  // AUTOGENERATED - Used by class "KODI::WEB::CWebAddon" with "void cb_control_set_loading_state(WEB_KODI_CONTROL handle, bool isLoading, bool canGoBack, bool canGoForward)" on "web/WebAddon.h".

  KODI::WEB::CWebAddon* cb = static_cast<KODI::WEB::CWebAddon*>(hdl);
  cb->cb_control_set_loading_state(handle, isLoading, canGoBack, canGoForward);
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_WEB_CONTROL_SET_LOADING_STATE_END>---*/
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_set_tooltip_v1(
    void* thisClassHdl,
    KODI_ADDON_INSTANCE_BACKEND_HDL hdl,
    WEB_KODI_CONTROL handle,
    const char* tooltip)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_WEB_CONTROL_SET_TOOLTIP>---*/
  // AUTOGENERATED - Used by class "KODI::WEB::CWebAddon" with "void cb_control_set_tooltip(WEB_KODI_CONTROL handle, const char* tooltip)" on "web/WebAddon.h".

  KODI::WEB::CWebAddon* cb = static_cast<KODI::WEB::CWebAddon*>(hdl);
  cb->cb_control_set_tooltip(handle, tooltip);
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_WEB_CONTROL_SET_TOOLTIP_END>---*/
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_set_status_message_v1(
    void* thisClassHdl,
    KODI_ADDON_INSTANCE_BACKEND_HDL hdl,
    WEB_KODI_CONTROL handle,
    const char* status)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_WEB_CONTROL_SET_STATUS_MESSAGE>---*/
  // AUTOGENERATED - Used by class "KODI::WEB::CWebAddon" with "void cb_control_set_status_message(WEB_KODI_CONTROL handle, const char* status)" on "web/WebAddon.h".

  KODI::WEB::CWebAddon* cb = static_cast<KODI::WEB::CWebAddon*>(hdl);
  cb->cb_control_set_status_message(handle, status);
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_WEB_CONTROL_SET_STATUS_MESSAGE_END>---*/
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_request_open_site_in_new_tab_v1(
    void* thisClassHdl,
    KODI_ADDON_INSTANCE_BACKEND_HDL hdl,
    WEB_KODI_CONTROL handle,
    const char* url)
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_WEB_CONTROL_REQUEST_OPEN_SITE_IN_NEW_TAB>---*/
  // AUTOGENERATED - Used by class "KODI::WEB::CWebAddon" with "void cb_control_request_open_site_in_new_tab(WEB_KODI_CONTROL handle, const char* url)" on "web/WebAddon.h".

  KODI::WEB::CWebAddon* cb = static_cast<KODI::WEB::CWebAddon*>(hdl);
  cb->cb_control_request_open_site_in_new_tab(handle, url);
  /*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_KODI_ADDON_WEB_CONTROL_REQUEST_OPEN_SITE_IN_NEW_TAB_END>---*/
}

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3_END>---*/

} /* namespace INTERFACE */
} /* namespace ADDONS */
} /* namespace KODI */
