/*
 *  Copyright (C) 2005-2022 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#include "imagedecoder.h"

// Shared API
#include "addons/kodi-dev-kit/src/shared/api/addon-instance/imagedecoder.h"

// Kodi
#include "addons/interface/RunningProcess.h"
#include "utils/log.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
#include "addons/ImageDecoder.h"
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

namespace KODI
{
namespace ADDONS
{
namespace INTERFACE
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

void CHdl_kodi_addoninstance_imagedecoder_h::InitDirect(
    directFuncToKodi_addoninstance_imagedecoder_h* ifcToKodi,
    directFuncToAddon_addoninstance_imagedecoder_h* ifcToAddon)
{
  ifcToKodi->thisClassHdl = this;
  m_ifcToAddon = ifcToAddon;
}

bool CHdl_kodi_addoninstance_imagedecoder_h::HandleMessage(int funcGroup,
                                                           int func,
                                                           const msgpack::unpacked& in,
                                                           msgpack::sbuffer& out)
{
  if (funcGroup != funcGroup_addoninstance_imagedecoder_h)
    return false;

  switch (func)
  {
    default:
      CLog::Log(LOGERROR,
                "CHdl_kodi_addoninstance_imagedecoder_h::{}: addon called with unknown function id "
                "'{}' on group 'addoninstance_imagedecoder_h'",
                __func__, func);
  }

  return false;
}

// Function calls from Kodi to addon

bool CHdl_kodi_addoninstance_imagedecoder_h::kodi_addon_imagedecoder_supports_file_v1(
    const KODI_ADDON_IMAGEDECODER_HDL hdl, const char* file)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_IMAGEDECODER_SUPPORTS_FILE_V1)(const KODI_ADDON_IMAGEDECODER_HDL hdl, const char* file);
  // Tuple in:          typedef std::tuple<PtrValue, std::string> msgChild__IN_kodi_addon_imagedecoder_supports_file_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_imagedecoder_supports_file_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_imagedecoder_supports_file_v1(PtrValue(hdl), file));
    if (!m_process->SendMessage(funcGroup_addoninstance_imagedecoder_h,
                                funcChild_kodi_addon_imagedecoder_supports_file_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_imagedecoder_supports_file_v1 t = ident.get().as<decltype(t)>();
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_imagedecoder_supports_file_v1(m_ifcToAddon->thisClassHdl, hdl,
                                                                file);
}

bool CHdl_kodi_addoninstance_imagedecoder_h::kodi_addon_imagedecoder_read_tag_v1(
    const KODI_ADDON_IMAGEDECODER_HDL hdl,
    const char* file,
    struct KODI_ADDON_IMAGEDECODER_INFO_TAG* info)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_IMAGEDECODER_READ_TAG_V1)(const KODI_ADDON_IMAGEDECODER_HDL hdl, const char* file, struct KODI_ADDON_IMAGEDECODER_INFO_TAG* info);
  // Tuple in:          typedef std::tuple<PtrValue, std::string> msgChild__IN_kodi_addon_imagedecoder_read_tag_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool, IFC_KODI_ADDON_IMAGEDECODER_INFO_TAG> msgChild_OUT_kodi_addon_imagedecoder_read_tag_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_imagedecoder_read_tag_v1(PtrValue(hdl), file));
    if (!m_process->SendMessage(funcGroup_addoninstance_imagedecoder_h,
                                funcChild_kodi_addon_imagedecoder_read_tag_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_imagedecoder_read_tag_v1 t = ident.get().as<decltype(t)>();
    std::get<1>(t).SetCStructure(info);
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_imagedecoder_read_tag_v1(m_ifcToAddon->thisClassHdl, hdl, file,
                                                           info);
}

bool CHdl_kodi_addoninstance_imagedecoder_h::kodi_addon_imagedecoder_load_image_from_memory_v1(
    const KODI_ADDON_IMAGEDECODER_HDL hdl,
    const char* mimetype,
    const uint8_t* buffer,
    size_t buf_size,
    unsigned int* width,
    unsigned int* height)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_IMAGEDECODER_LOAD_IMAGE_FROM_MEMORY_V1)(const KODI_ADDON_IMAGEDECODER_HDL hdl, const char* mimetype, const uint8_t* buffer, size_t buf_size, unsigned int* width, unsigned int* height);
  // Tuple in:          typedef std::tuple<PtrValue, std::string, std::vector<uint8_t>, size_t, unsigned int, unsigned int> msgChild__IN_kodi_addon_imagedecoder_load_image_from_memory_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool, unsigned int, unsigned int> msgChild_OUT_kodi_addon_imagedecoder_load_image_from_memory_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_imagedecoder_load_image_from_memory_v1(
                          PtrValue(hdl), mimetype, std::vector<uint8_t>(buffer, buffer + buf_size),
                          buf_size, *width, *height));
    if (!m_process->SendMessage(funcGroup_addoninstance_imagedecoder_h,
                                funcChild_kodi_addon_imagedecoder_load_image_from_memory_v1, in,
                                out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_imagedecoder_load_image_from_memory_v1 t =
        ident.get().as<decltype(t)>();
    *width = std::get<1>(t);
    *height = std::get<2>(t);
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_imagedecoder_load_image_from_memory_v1(
      m_ifcToAddon->thisClassHdl, hdl, mimetype, buffer, buf_size, width, height);
}

bool CHdl_kodi_addoninstance_imagedecoder_h::kodi_addon_imagedecoder_decode_v1(
    const KODI_ADDON_IMAGEDECODER_HDL hdl,
    uint8_t* pixels,
    size_t pixels_size,
    unsigned int width,
    unsigned int height,
    unsigned int pitch,
    enum ADDON_IMG_FMT format)
{
  // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_IMAGEDECODER_DECODE_V1)(const KODI_ADDON_IMAGEDECODER_HDL hdl, uint8_t* pixels, size_t pixels_size, unsigned int width, unsigned int height, unsigned int pitch, enum ADDON_IMG_FMT format);
  // Tuple in:          typedef std::tuple<PtrValue, size_t, unsigned int, unsigned int, unsigned int, ADDON_IMG_FMT> msgChild__IN_kodi_addon_imagedecoder_decode_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool, std::vector<uint8_t>> msgChild_OUT_kodi_addon_imagedecoder_decode_v1; /* Autogenerated */

#ifndef KODI_INHIBIT_SHARED
  if (!m_interface.m_directDll)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgChild__IN_kodi_addon_imagedecoder_decode_v1(PtrValue(hdl), pixels_size,
                                                                     width, height, pitch, format));
    if (!m_process->SendMessage(funcGroup_addoninstance_imagedecoder_h,
                                funcChild_kodi_addon_imagedecoder_decode_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgChild_OUT_kodi_addon_imagedecoder_decode_v1 t = ident.get().as<decltype(t)>();
    std::memcpy(pixels, std::get<1>(t).data(), sizeof(uint8_t) * pixels_size);
    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  return m_ifcToAddon->kodi_addon_imagedecoder_decode_v1(m_ifcToAddon->thisClassHdl, hdl, pixels,
                                                         pixels_size, width, height, pitch, format);
}

// Callbacks from addon to Kodi
/* NOTE: unused (no callbacks here) */

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3_END>---*/

} /* namespace INTERFACE */
} /* namespace ADDONS */
} /* namespace KODI */
