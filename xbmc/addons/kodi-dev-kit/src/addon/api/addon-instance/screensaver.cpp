/*
 *  Copyright (C) 2005-2022 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#include "screensaver.h"

#include "src/addon/core/addon_offscreen_render_control.h"

// Shared API
#include "src/shared/Instances.h"

// Lib code
#include "core/addon_control.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

using namespace KODI::ADDONS::INTERFACE;
using namespace KODI_ADDON::INTERNAL;

namespace KODI_ADDON
{
namespace INTERNAL
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

void CHdl_kodi_addoninstance_screensaver_h::InitDirect(
    directFuncToAddon_addoninstance_screensaver_h* ifcToAddon)
{
  ifcToAddon->thisClassHdl = this;
  ifcToAddon->kodi_addon_screensaver_start_v1 = kodi_addon_screensaver_start_v1;
  ifcToAddon->kodi_addon_screensaver_stop_v1 = kodi_addon_screensaver_stop_v1;
  ifcToAddon->kodi_addon_screensaver_render_v1 = kodi_addon_screensaver_render_v1;
}

#ifndef KODI_INHIBIT_SHARED
bool CHdl_kodi_addoninstance_screensaver_h::HandleMessage(int funcGroup,
                                                          int func,
                                                          const msgpack::unpacked& in,
                                                          msgpack::sbuffer& out)
{
  if (funcGroup != funcGroup_addoninstance_screensaver_h)
    return false;

  switch (func)
  {
    case funcChild_kodi_addon_screensaver_start_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_SCREENSAVER_START_V1)(const KODI_ADDON_SCREENSAVER_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrKodiOffscreen, uint64_t, int, int, int, int, PtrValue /* < Offscreen render */, PtrValue> msgChild__IN_kodi_addon_screensaver_start_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, PtrAddonOffscreen, bool /* < Offscreen render */> msgChild_OUT_kodi_addon_screensaver_start_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_screensaver_start_v1 t = in.get().as<decltype(t)>();
      PtrKodiOffscreen kodiOffsetHdl = std::get<0>(t);
      uint64_t renderId = std::get<1>(t);
      int x = std::get<2>(t);
      int y = std::get<3>(t);
      int width = std::get<4>(t);
      int height = std::get<5>(t);
      ADDON_HARDWARE_CONTEXT context = reinterpret_cast<ADDON_HARDWARE_CONTEXT>(std::get<6>(t));
      IAddonOffscreenRenderControl* auto_gen_render_control =
          GenerateOffscreenControl(kodiOffsetHdl, renderId, x, y, width, height, context);
      bool auto_gen_render_ret = auto_gen_render_control && auto_gen_render_control->Start();

      const KODI_ADDON_SCREENSAVER_HDL hdl =
          reinterpret_cast<KODI_ADDON_SCREENSAVER_HDL>(std::get<7>(t));
      bool auto_gen_ret = kodi_addon_screensaver_start_v1(this, hdl);

      msgpack::pack(
          out, msgChild_OUT_kodi_addon_screensaver_start_v1(
                   auto_gen_ret, PtrAddonOffscreen(auto_gen_render_control), auto_gen_render_ret));
      return true;
    }
    case funcChild_kodi_addon_screensaver_stop_v1:
    {
      // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_SCREENSAVER_STOP_V1)(const KODI_ADDON_SCREENSAVER_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrAddonOffscreen /* < Offscreen render */, PtrValue> msgChild__IN_kodi_addon_screensaver_stop_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_screensaver_stop_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_screensaver_stop_v1 t = in.get().as<decltype(t)>();
      IAddonOffscreenRenderControl* auto_gen_render_control =
          reinterpret_cast<IAddonOffscreenRenderControl*>(std::get<0>(t));
      const KODI_ADDON_SCREENSAVER_HDL hdl =
          reinterpret_cast<KODI_ADDON_SCREENSAVER_HDL>(std::get<1>(t));
      kodi_addon_screensaver_stop_v1(this, hdl);

      if (auto_gen_render_control)
      {
        {
          auto_gen_render_control->Stop();
          delete auto_gen_render_control;
        }
      }
      return true;
    }
    case funcChild_kodi_addon_screensaver_render_v1:
    {
      // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_SCREENSAVER_RENDER_V1)(const KODI_ADDON_SCREENSAVER_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrAddonOffscreen /* < Offscreen render */, PtrValue> msgChild__IN_kodi_addon_screensaver_render_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_screensaver_render_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_screensaver_render_v1 t = in.get().as<decltype(t)>();
      IAddonOffscreenRenderControl* auto_gen_render_control =
          reinterpret_cast<IAddonOffscreenRenderControl*>(std::get<0>(t));
      if (auto_gen_render_control)
        auto_gen_render_control->RenderBegin();

      const KODI_ADDON_SCREENSAVER_HDL hdl =
          reinterpret_cast<KODI_ADDON_SCREENSAVER_HDL>(std::get<1>(t));
      kodi_addon_screensaver_render_v1(this, hdl);

      if (auto_gen_render_control)
        auto_gen_render_control->RenderEnd();
      return true;
    }
    default:
      break;
  }
  return false;
}
#endif /* !KODI_INHIBIT_SHARED */

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3_END>---*/

bool CHdl_kodi_addoninstance_screensaver_h::kodi_addon_screensaver_start_v1(
    void* thisClassHdl, const KODI_ADDON_SCREENSAVER_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_screensaver_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_screensaver.v1.start)
  {
    auto_gen_ret = union_data->types.kodi_addon_screensaver.v1.start(union_data->hdl);
  }
  return auto_gen_ret;
}

void CHdl_kodi_addoninstance_screensaver_h::kodi_addon_screensaver_stop_v1(
    void* thisClassHdl, const KODI_ADDON_SCREENSAVER_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_screensaver_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_screensaver.v1.stop)
  {
    union_data->types.kodi_addon_screensaver.v1.stop(union_data->hdl);
  }
}

void CHdl_kodi_addoninstance_screensaver_h::kodi_addon_screensaver_render_v1(
    void* thisClassHdl, const KODI_ADDON_SCREENSAVER_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_screensaver_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_screensaver.v1.render)
  {
    union_data->types.kodi_addon_screensaver.v1.render(union_data->hdl);
  }
}

} /* namespace INTERNAL */
} /* namespace KODI_ADDON */

ATTR_DLL_EXPORT void kodi_addon_screensaver_get_properties(
    const KODI_ADDON_INSTANCE_BACKEND_HDL hdl, struct KODI_ADDON_SCREENSAVER_PROPS* props)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_screensaver_get_properties( const KODI_ADDON_INSTANCE_BACKEND_HDL hdl, struct KODI_ADDON_SCREENSAVER_PROPS* props) __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_addon_screensaver_get_properties_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<IFC_KODI_ADDON_SCREENSAVER_PROPS> msgParent_OUT_kodi_addon_screensaver_get_properties_v1; /* Autogenerated */

  if (hdl == nullptr || props == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgParent__IN_kodi_addon_screensaver_get_properties_v1(PtrValue(hdl)));
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
            funcGroup_addoninstance_screensaver_h,
            funcParent_kodi_addon_screensaver_get_properties_v1, in, out))
      return;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_addon_screensaver_get_properties_v1 t = ident.get().as<decltype(t)>();

    std::get<0>(t).SetCStructure(props);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_screensaver_h;
  auto_gen_group.kodi_addon_screensaver_get_properties_v1(auto_gen_group.thisClassHdl, hdl, props);
}

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4_END>---*/
