/*
 *  Copyright (C) 2005-2022 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#include "web.h"

#include "src/addon/core/addon_offscreen_render_control.h"

// Shared API
#include "src/shared/Instances.h"

// Lib code
#include "core/addon_control.h"

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

using namespace KODI::ADDONS::INTERFACE;
using namespace KODI_ADDON::INTERNAL;

namespace KODI_ADDON
{
namespace INTERNAL
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

void CHdl_kodi_addoninstance_web_h::InitDirect(directFuncToAddon_addoninstance_web_h* ifcToAddon)
{
  ifcToAddon->thisClassHdl = this;
  ifcToAddon->kodi_addon_web_start_instance_v1 = kodi_addon_web_start_instance_v1;
  ifcToAddon->kodi_addon_web_stop_instance_v1 = kodi_addon_web_stop_instance_v1;
  ifcToAddon->kodi_addon_web_main_initialize_v1 = kodi_addon_web_main_initialize_v1;
  ifcToAddon->kodi_addon_web_main_loop_v1 = kodi_addon_web_main_loop_v1;
  ifcToAddon->kodi_addon_web_main_shutdown_v1 = kodi_addon_web_main_shutdown_v1;
  ifcToAddon->kodi_addon_web_set_mute_v1 = kodi_addon_web_set_mute_v1;
  ifcToAddon->kodi_addon_web_set_language_v1 = kodi_addon_web_set_language_v1;
  ifcToAddon->kodi_addon_web_create_control_v1 = kodi_addon_web_create_control_v1;
  ifcToAddon->kodi_addon_web_destroy_control_v1 = kodi_addon_web_destroy_control_v1;
  ifcToAddon->kodi_addon_web_control_render_init_v1 = kodi_addon_web_control_render_init_v1;
  ifcToAddon->kodi_addon_web_control_render_deinit_v1 = kodi_addon_web_control_render_deinit_v1;
  ifcToAddon->kodi_addon_web_control_render_v1 = kodi_addon_web_control_render_v1;
  ifcToAddon->kodi_addon_web_control_dirty_v1 = kodi_addon_web_control_dirty_v1;
  ifcToAddon->kodi_addon_web_control_on_init_v1 = kodi_addon_web_control_on_init_v1;
  ifcToAddon->kodi_addon_web_control_on_action_v1 = kodi_addon_web_control_on_action_v1;
  ifcToAddon->kodi_addon_web_control_on_mouse_event_v1 = kodi_addon_web_control_on_mouse_event_v1;
  ifcToAddon->kodi_addon_web_control_open_website_v1 = kodi_addon_web_control_open_website_v1;
  ifcToAddon->kodi_addon_web_control_get_history_v1 = kodi_addon_web_control_get_history_v1;
  ifcToAddon->kodi_addon_web_control_search_text_v1 = kodi_addon_web_control_search_text_v1;
  ifcToAddon->kodi_addon_web_control_stop_search_v1 = kodi_addon_web_control_stop_search_v1;
  ifcToAddon->kodi_addon_web_control_web_cmd_reload_v1 = kodi_addon_web_control_web_cmd_reload_v1;
  ifcToAddon->kodi_addon_web_control_web_cmd_stop_load_v1 =
      kodi_addon_web_control_web_cmd_stop_load_v1;
  ifcToAddon->kodi_addon_web_control_web_cmd_nav_back_v1 =
      kodi_addon_web_control_web_cmd_nav_back_v1;
  ifcToAddon->kodi_addon_web_control_web_cmd_nav_forward_v1 =
      kodi_addon_web_control_web_cmd_nav_forward_v1;
  ifcToAddon->kodi_addon_web_control_web_open_own_context_menu_v1 =
      kodi_addon_web_control_web_open_own_context_menu_v1;
  ifcToAddon->kodi_addon_web_control_screen_size_change_v1 =
      kodi_addon_web_control_screen_size_change_v1;
}

#ifndef KODI_INHIBIT_SHARED
bool CHdl_kodi_addoninstance_web_h::HandleMessage(int funcGroup,
                                                  int func,
                                                  const msgpack::unpacked& in,
                                                  msgpack::sbuffer& out)
{
  if (funcGroup != funcGroup_addoninstance_web_h)
    return false;

  switch (func)
  {
    case funcChild_kodi_addon_web_start_instance_v1:
    {
      // Original API call: typedef enum WEB_ADDON_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_START_INSTANCE_V1)(const KODI_ADDON_WEB_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_web_start_instance_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<WEB_ADDON_ERROR> msgChild_OUT_kodi_addon_web_start_instance_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_web_start_instance_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));

      enum WEB_ADDON_ERROR auto_gen_ret = kodi_addon_web_start_instance_v1(this, auto_gen_hdl);

      msgpack::pack(out, msgChild_OUT_kodi_addon_web_start_instance_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_web_stop_instance_v1:
    {
      // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_STOP_INSTANCE_V1)(const KODI_ADDON_WEB_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_web_stop_instance_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_web_stop_instance_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_web_stop_instance_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));

      kodi_addon_web_stop_instance_v1(this, auto_gen_hdl);

      return true;
    }
    case funcChild_kodi_addon_web_main_initialize_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_MAIN_INITIALIZE_V1)(const KODI_ADDON_WEB_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_web_main_initialize_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_web_main_initialize_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_web_main_initialize_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));

      bool auto_gen_ret = kodi_addon_web_main_initialize_v1(this, auto_gen_hdl);

      msgpack::pack(out, msgChild_OUT_kodi_addon_web_main_initialize_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_web_main_loop_v1:
    {
      // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_MAIN_LOOP_V1)(const KODI_ADDON_WEB_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_web_main_loop_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_web_main_loop_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_web_main_loop_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));

      kodi_addon_web_main_loop_v1(this, auto_gen_hdl);

      return true;
    }
    case funcChild_kodi_addon_web_main_shutdown_v1:
    {
      // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_MAIN_SHUTDOWN_V1)(const KODI_ADDON_WEB_HDL hdl);
      // Tuple in:          typedef std::tuple<PtrValue> msgChild__IN_kodi_addon_web_main_shutdown_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_web_main_shutdown_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_web_main_shutdown_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));

      kodi_addon_web_main_shutdown_v1(this, auto_gen_hdl);

      return true;
    }
    case funcChild_kodi_addon_web_set_mute_v1:
    {
      // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_SET_MUTE_V1)(const KODI_ADDON_WEB_HDL hdl, bool mute);
      // Tuple in:          typedef std::tuple<PtrValue, bool> msgChild__IN_kodi_addon_web_set_mute_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_web_set_mute_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_web_set_mute_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      bool mute = std::get<1>(t);
      kodi_addon_web_set_mute_v1(this, auto_gen_hdl, mute);

      return true;
    }
    case funcChild_kodi_addon_web_set_language_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_SET_LANGUAGE_V1)(const KODI_ADDON_WEB_HDL hdl, const char* language);
      // Tuple in:          typedef std::tuple<PtrValue, std::string> msgChild__IN_kodi_addon_web_set_language_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_web_set_language_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_web_set_language_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      const std::string& language = std::get<1>(t);
      bool auto_gen_ret = kodi_addon_web_set_language_v1(this, auto_gen_hdl, language.c_str());

      msgpack::pack(out, msgChild_OUT_kodi_addon_web_set_language_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_web_create_control_v1:
    {
      // Original API call: typedef enum WEB_ADDON_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CREATE_CONTROL_V1)(const KODI_ADDON_WEB_HDL hdl, const struct WEB_ADDON_GUI_PROPS* props, const char* start_url, WEB_KODI_CONTROL* handle);
      // Tuple in:          typedef std::tuple<PtrValue, IFC_WEB_ADDON_GUI_PROPS, std::string> msgChild__IN_kodi_addon_web_create_control_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<WEB_ADDON_ERROR, PtrValue> msgChild_OUT_kodi_addon_web_create_control_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_web_create_control_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      WEB_ADDON_GUI_PROPS props;
      std::get<1>(t).SetCStructure(&props);
      const std::string& start_url = std::get<2>(t);
      WEB_KODI_CONTROL handle = nullptr;
      enum WEB_ADDON_ERROR auto_gen_ret =
          kodi_addon_web_create_control_v1(this, auto_gen_hdl, &props, start_url.c_str(), &handle);

      msgpack::pack(out,
                    msgChild_OUT_kodi_addon_web_create_control_v1(auto_gen_ret, PtrValue(handle)));
      return true;
    }
    case funcChild_kodi_addon_web_destroy_control_v1:
    {
      // Original API call: typedef enum WEB_ADDON_ERROR(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_DESTROY_CONTROL_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle, bool complete);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, bool> msgChild__IN_kodi_addon_web_destroy_control_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<WEB_ADDON_ERROR> msgChild_OUT_kodi_addon_web_destroy_control_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_web_destroy_control_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      const WEB_KODI_CONTROL handle = reinterpret_cast<WEB_KODI_CONTROL>(std::get<1>(t));
      bool complete = std::get<2>(t);
      enum WEB_ADDON_ERROR auto_gen_ret =
          kodi_addon_web_destroy_control_v1(this, auto_gen_hdl, handle, complete);

      msgpack::pack(out, msgChild_OUT_kodi_addon_web_destroy_control_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_web_control_render_init_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_RENDER_INIT_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle);
      // Tuple in:          typedef std::tuple<PtrKodiOffscreen, uint64_t, int, int, int, int, PtrValue /* < Offscreen render */, PtrValue, PtrValue> msgChild__IN_kodi_addon_web_control_render_init_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, PtrAddonOffscreen, bool /* < Offscreen render */> msgChild_OUT_kodi_addon_web_control_render_init_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_web_control_render_init_v1 t = in.get().as<decltype(t)>();
      PtrKodiOffscreen kodiOffsetHdl = std::get<0>(t);
      uint64_t renderId = std::get<1>(t);
      int x = std::get<2>(t);
      int y = std::get<3>(t);
      int width = std::get<4>(t);
      int height = std::get<5>(t);
      ADDON_HARDWARE_CONTEXT context = reinterpret_cast<ADDON_HARDWARE_CONTEXT>(std::get<6>(t));
      IAddonOffscreenRenderControl* auto_gen_render_control =
          GenerateOffscreenControl(kodiOffsetHdl, renderId, x, y, width, height, context);
      bool auto_gen_render_ret = auto_gen_render_control && auto_gen_render_control->Start();

      const KODI_ADDON_WEB_HDL hdl = reinterpret_cast<KODI_ADDON_WEB_HDL>(std::get<7>(t));
      const WEB_KODI_CONTROL handle = reinterpret_cast<WEB_KODI_CONTROL>(std::get<8>(t));
      bool auto_gen_ret = kodi_addon_web_control_render_init_v1(this, hdl, handle);

      msgpack::pack(
          out, msgChild_OUT_kodi_addon_web_control_render_init_v1(
                   auto_gen_ret, PtrAddonOffscreen(auto_gen_render_control), auto_gen_render_ret));
      return true;
    }
    case funcChild_kodi_addon_web_control_render_deinit_v1:
    {
      // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_RENDER_DEINIT_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle);
      // Tuple in:          typedef std::tuple<PtrAddonOffscreen /* < Offscreen render */, PtrValue, PtrValue> msgChild__IN_kodi_addon_web_control_render_deinit_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_web_control_render_deinit_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_web_control_render_deinit_v1 t = in.get().as<decltype(t)>();
      IAddonOffscreenRenderControl* auto_gen_render_control =
          reinterpret_cast<IAddonOffscreenRenderControl*>(std::get<0>(t));
      const KODI_ADDON_WEB_HDL hdl = reinterpret_cast<KODI_ADDON_WEB_HDL>(std::get<1>(t));
      const WEB_KODI_CONTROL handle = reinterpret_cast<WEB_KODI_CONTROL>(std::get<2>(t));
      kodi_addon_web_control_render_deinit_v1(this, hdl, handle);

      if (auto_gen_render_control)
      {
        {
          auto_gen_render_control->Stop();
          delete auto_gen_render_control;
        }
      }
      return true;
    }
    case funcChild_kodi_addon_web_control_render_v1:
    {
      // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_RENDER_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle);
      // Tuple in:          typedef std::tuple<PtrAddonOffscreen /* < Offscreen render */, PtrValue, PtrValue> msgChild__IN_kodi_addon_web_control_render_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_web_control_render_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_web_control_render_v1 t = in.get().as<decltype(t)>();
      IAddonOffscreenRenderControl* auto_gen_render_control =
          reinterpret_cast<IAddonOffscreenRenderControl*>(std::get<0>(t));
      if (auto_gen_render_control)
        auto_gen_render_control->RenderBegin();

      const KODI_ADDON_WEB_HDL hdl = reinterpret_cast<KODI_ADDON_WEB_HDL>(std::get<1>(t));
      const WEB_KODI_CONTROL handle = reinterpret_cast<WEB_KODI_CONTROL>(std::get<2>(t));
      kodi_addon_web_control_render_v1(this, hdl, handle);

      if (auto_gen_render_control)
        auto_gen_render_control->RenderEnd();
      return true;
    }
    case funcChild_kodi_addon_web_control_dirty_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_DIRTY_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_web_control_dirty_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_web_control_dirty_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_web_control_dirty_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      const WEB_KODI_CONTROL handle = reinterpret_cast<WEB_KODI_CONTROL>(std::get<1>(t));
      bool auto_gen_ret = kodi_addon_web_control_dirty_v1(this, auto_gen_hdl, handle);

      msgpack::pack(out, msgChild_OUT_kodi_addon_web_control_dirty_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_web_control_on_init_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_ON_INIT_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_web_control_on_init_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_web_control_on_init_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_web_control_on_init_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      const WEB_KODI_CONTROL handle = reinterpret_cast<WEB_KODI_CONTROL>(std::get<1>(t));
      bool auto_gen_ret = kodi_addon_web_control_on_init_v1(this, auto_gen_hdl, handle);

      msgpack::pack(out, msgChild_OUT_kodi_addon_web_control_on_init_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_web_control_on_action_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_ON_ACTION_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle, const struct KODI_ADDON_ACTION_DATA* action, int* nextItem);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, IFC_KODI_ADDON_ACTION_DATA, int> msgChild__IN_kodi_addon_web_control_on_action_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, int> msgChild_OUT_kodi_addon_web_control_on_action_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_web_control_on_action_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      KODI_ADDON_ACTION_DATA action;
      const WEB_KODI_CONTROL handle = reinterpret_cast<WEB_KODI_CONTROL>(std::get<1>(t));
      std::get<2>(t).SetCStructure(&action);
      int nextItem = std::get<3>(t);
      bool auto_gen_ret =
          kodi_addon_web_control_on_action_v1(this, auto_gen_hdl, handle, &action, &nextItem);

      msgpack::pack(out, msgChild_OUT_kodi_addon_web_control_on_action_v1(auto_gen_ret, nextItem));
      return true;
    }
    case funcChild_kodi_addon_web_control_on_mouse_event_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_ON_MOUSE_EVENT_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle, int id, double x, double y, double offsetX, double offsetY, int state);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, int, double, double, double, double, int> msgChild__IN_kodi_addon_web_control_on_mouse_event_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_web_control_on_mouse_event_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_web_control_on_mouse_event_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      const WEB_KODI_CONTROL handle = reinterpret_cast<WEB_KODI_CONTROL>(std::get<1>(t));
      int id = std::get<2>(t);
      double x = std::get<3>(t);
      double y = std::get<4>(t);
      double offsetX = std::get<5>(t);
      double offsetY = std::get<6>(t);
      int state = std::get<7>(t);
      bool auto_gen_ret = kodi_addon_web_control_on_mouse_event_v1(this, auto_gen_hdl, handle, id,
                                                                   x, y, offsetX, offsetY, state);

      msgpack::pack(out, msgChild_OUT_kodi_addon_web_control_on_mouse_event_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_web_control_open_website_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_OPEN_WEBSITE_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle, const char* url);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, std::string> msgChild__IN_kodi_addon_web_control_open_website_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool> msgChild_OUT_kodi_addon_web_control_open_website_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_web_control_open_website_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      const WEB_KODI_CONTROL handle = reinterpret_cast<WEB_KODI_CONTROL>(std::get<1>(t));
      const std::string& url = std::get<2>(t);
      bool auto_gen_ret =
          kodi_addon_web_control_open_website_v1(this, auto_gen_hdl, handle, url.c_str());

      msgpack::pack(out, msgChild_OUT_kodi_addon_web_control_open_website_v1(auto_gen_ret));
      return true;
    }
    case funcChild_kodi_addon_web_control_get_history_v1:
    {
      // Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_GET_HISTORY_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle, char*** list, size_t* entries, bool behind_current);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, size_t, bool> msgChild__IN_kodi_addon_web_control_get_history_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<bool, std::vector<std::string>, size_t> msgChild_OUT_kodi_addon_web_control_get_history_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_web_control_get_history_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      const WEB_KODI_CONTROL handle = reinterpret_cast<WEB_KODI_CONTROL>(std::get<1>(t));
      char** list = nullptr;
      size_t entries = std::get<2>(t);
      bool behind_current = std::get<3>(t);
      bool auto_gen_ret = kodi_addon_web_control_get_history_v1(this, auto_gen_hdl, handle, &list,
                                                                &entries, behind_current);

      std::vector<std::string> cpp_list;
      cpp_list.reserve(entries);
      if (list)
      {
        for (size_t i = 0; i < entries; ++i)
        {
          if (list[i])
          {
            cpp_list.emplace_back(list[i]);
            free(list[i]);
          }
          else
          {
            cpp_list.emplace_back("");
          }
        }
        free(list);
      }
      msgpack::pack(
          out, msgChild_OUT_kodi_addon_web_control_get_history_v1(auto_gen_ret, cpp_list, entries));
      return true;
    }
    case funcChild_kodi_addon_web_control_search_text_v1:
    {
      // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_SEARCH_TEXT_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle, const char* text, bool forward, bool matchCase, bool findNext);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, std::string, bool, bool, bool> msgChild__IN_kodi_addon_web_control_search_text_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_web_control_search_text_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_web_control_search_text_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      const WEB_KODI_CONTROL handle = reinterpret_cast<WEB_KODI_CONTROL>(std::get<1>(t));
      const std::string& text = std::get<2>(t);
      bool forward = std::get<3>(t);
      bool matchCase = std::get<4>(t);
      bool findNext = std::get<5>(t);
      kodi_addon_web_control_search_text_v1(this, auto_gen_hdl, handle, text.c_str(), forward,
                                            matchCase, findNext);

      return true;
    }
    case funcChild_kodi_addon_web_control_stop_search_v1:
    {
      // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_STOP_SEARCH_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle, bool clearSelection);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, bool> msgChild__IN_kodi_addon_web_control_stop_search_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_web_control_stop_search_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_web_control_stop_search_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      const WEB_KODI_CONTROL handle = reinterpret_cast<WEB_KODI_CONTROL>(std::get<1>(t));
      bool clearSelection = std::get<2>(t);
      kodi_addon_web_control_stop_search_v1(this, auto_gen_hdl, handle, clearSelection);

      return true;
    }
    case funcChild_kodi_addon_web_control_web_cmd_reload_v1:
    {
      // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_WEB_CMD_RELOAD_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_web_control_web_cmd_reload_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_web_control_web_cmd_reload_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_web_control_web_cmd_reload_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      const WEB_KODI_CONTROL handle = reinterpret_cast<WEB_KODI_CONTROL>(std::get<1>(t));
      kodi_addon_web_control_web_cmd_reload_v1(this, auto_gen_hdl, handle);

      return true;
    }
    case funcChild_kodi_addon_web_control_web_cmd_stop_load_v1:
    {
      // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_WEB_CMD_STOP_LOAD_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_web_control_web_cmd_stop_load_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_web_control_web_cmd_stop_load_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_web_control_web_cmd_stop_load_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      const WEB_KODI_CONTROL handle = reinterpret_cast<WEB_KODI_CONTROL>(std::get<1>(t));
      kodi_addon_web_control_web_cmd_stop_load_v1(this, auto_gen_hdl, handle);

      return true;
    }
    case funcChild_kodi_addon_web_control_web_cmd_nav_back_v1:
    {
      // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_WEB_CMD_NAV_BACK_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_web_control_web_cmd_nav_back_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_web_control_web_cmd_nav_back_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_web_control_web_cmd_nav_back_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      const WEB_KODI_CONTROL handle = reinterpret_cast<WEB_KODI_CONTROL>(std::get<1>(t));
      kodi_addon_web_control_web_cmd_nav_back_v1(this, auto_gen_hdl, handle);

      return true;
    }
    case funcChild_kodi_addon_web_control_web_cmd_nav_forward_v1:
    {
      // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_WEB_CMD_NAV_FORWARD_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_web_control_web_cmd_nav_forward_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_web_control_web_cmd_nav_forward_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_web_control_web_cmd_nav_forward_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      const WEB_KODI_CONTROL handle = reinterpret_cast<WEB_KODI_CONTROL>(std::get<1>(t));
      kodi_addon_web_control_web_cmd_nav_forward_v1(this, auto_gen_hdl, handle);

      return true;
    }
    case funcChild_kodi_addon_web_control_web_open_own_context_menu_v1:
    {
      // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_WEB_OPEN_OWN_CONTEXT_MENU_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue> msgChild__IN_kodi_addon_web_control_web_open_own_context_menu_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_web_control_web_open_own_context_menu_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_web_control_web_open_own_context_menu_v1 t =
          in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      const WEB_KODI_CONTROL handle = reinterpret_cast<WEB_KODI_CONTROL>(std::get<1>(t));
      kodi_addon_web_control_web_open_own_context_menu_v1(this, auto_gen_hdl, handle);

      return true;
    }
    case funcChild_kodi_addon_web_control_screen_size_change_v1:
    {
      // Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_WEB_CONTROL_SCREEN_SIZE_CHANGE_V1)(const KODI_ADDON_WEB_HDL hdl, const WEB_KODI_CONTROL handle, float x, float y, float width, float height, bool fullscreen);
      // Tuple in:          typedef std::tuple<PtrValue, PtrValue, float, float, float, float, bool> msgChild__IN_kodi_addon_web_control_screen_size_change_v1; /* Autogenerated */
      // Tuple out:         typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_web_control_screen_size_change_v1; /* Autogenerated */

      msgChild__IN_kodi_addon_web_control_screen_size_change_v1 t = in.get().as<decltype(t)>();
      KODI_ADDON_HDL auto_gen_hdl = reinterpret_cast<KODI_ADDON_HDL>(std::get<0>(t));
      const WEB_KODI_CONTROL handle = reinterpret_cast<WEB_KODI_CONTROL>(std::get<1>(t));
      float x = std::get<2>(t);
      float y = std::get<3>(t);
      float width = std::get<4>(t);
      float height = std::get<5>(t);
      bool fullscreen = std::get<6>(t);
      kodi_addon_web_control_screen_size_change_v1(this, auto_gen_hdl, handle, x, y, width, height,
                                                   fullscreen);

      return true;
    }
    default:
      break;
  }
  return false;
}
#endif /* !KODI_INHIBIT_SHARED */

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_3_END>---*/

enum WEB_ADDON_ERROR CHdl_kodi_addoninstance_web_h::kodi_addon_web_start_instance_v1(
    void* thisClassHdl, const KODI_ADDON_WEB_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return WEB_ADDON_ERROR_PERMANENT_FAILED;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum WEB_ADDON_ERROR auto_gen_ret = WEB_ADDON_ERROR_PERMANENT_FAILED;
  if (union_data->types.kodi_addon_web.v1.start_instance)
  {
    auto_gen_ret = union_data->types.kodi_addon_web.v1.start_instance(union_data->hdl);
  }
  return auto_gen_ret;
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_stop_instance_v1(
    void* thisClassHdl, const KODI_ADDON_WEB_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_web.v1.stop_instance)
  {
    union_data->types.kodi_addon_web.v1.stop_instance(union_data->hdl);
  }
}

bool CHdl_kodi_addoninstance_web_h::kodi_addon_web_main_initialize_v1(
    void* thisClassHdl, const KODI_ADDON_WEB_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_web.v1.main_initialize)
  {
    auto_gen_ret = union_data->types.kodi_addon_web.v1.main_initialize(union_data->hdl);
  }
  return auto_gen_ret;
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_main_loop_v1(
    void* thisClassHdl, const KODI_ADDON_WEB_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_web.v1.main_loop)
  {
    union_data->types.kodi_addon_web.v1.main_loop(union_data->hdl);
  }
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_main_shutdown_v1(
    void* thisClassHdl, const KODI_ADDON_WEB_HDL hdl) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_web.v1.main_shutdown)
  {
    union_data->types.kodi_addon_web.v1.main_shutdown(union_data->hdl);
  }
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_set_mute_v1(void* thisClassHdl,
                                                               const KODI_ADDON_WEB_HDL hdl,
                                                               bool mute) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_web.v1.set_mute)
  {
    union_data->types.kodi_addon_web.v1.set_mute(union_data->hdl, mute);
  }
}

bool CHdl_kodi_addoninstance_web_h::kodi_addon_web_set_language_v1(
    void* thisClassHdl, const KODI_ADDON_WEB_HDL hdl, const char* language) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_web.v1.set_language)
  {
    auto_gen_ret = union_data->types.kodi_addon_web.v1.set_language(union_data->hdl, language);
  }
  return auto_gen_ret;
}

enum WEB_ADDON_ERROR CHdl_kodi_addoninstance_web_h::kodi_addon_web_create_control_v1(
    void* thisClassHdl,
    const KODI_ADDON_WEB_HDL hdl,
    const struct WEB_ADDON_GUI_PROPS* props,
    const char* start_url,
    WEB_KODI_CONTROL* handle) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return WEB_ADDON_ERROR_PERMANENT_FAILED;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum WEB_ADDON_ERROR auto_gen_ret = WEB_ADDON_ERROR_PERMANENT_FAILED;
  if (union_data->types.kodi_addon_web.v1.create_control)
  {
    auto_gen_ret = union_data->types.kodi_addon_web.v1.create_control(union_data->hdl, props,
                                                                      start_url, handle);
  }
  return auto_gen_ret;
}

enum WEB_ADDON_ERROR CHdl_kodi_addoninstance_web_h::kodi_addon_web_destroy_control_v1(
    void* thisClassHdl,
    const KODI_ADDON_WEB_HDL hdl,
    const WEB_KODI_CONTROL handle,
    bool complete) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return WEB_ADDON_ERROR_PERMANENT_FAILED;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  enum WEB_ADDON_ERROR auto_gen_ret = WEB_ADDON_ERROR_PERMANENT_FAILED;
  if (union_data->types.kodi_addon_web.v1.destroy_control)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_web.v1.destroy_control(union_data->hdl, handle, complete);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_render_init_v1(
    void* thisClassHdl,
    const KODI_ADDON_WEB_HDL hdl,
    const WEB_KODI_CONTROL handle) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_web.v1.control_render_init)
  {
    auto_gen_ret = union_data->types.kodi_addon_web.v1.control_render_init(union_data->hdl, handle);
  }
  return auto_gen_ret;
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_render_deinit_v1(
    void* thisClassHdl,
    const KODI_ADDON_WEB_HDL hdl,
    const WEB_KODI_CONTROL handle) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_web.v1.control_render_deinit)
  {
    union_data->types.kodi_addon_web.v1.control_render_deinit(union_data->hdl, handle);
  }
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_render_v1(
    void* thisClassHdl,
    const KODI_ADDON_WEB_HDL hdl,
    const WEB_KODI_CONTROL handle) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_web.v1.control_render)
  {
    union_data->types.kodi_addon_web.v1.control_render(union_data->hdl, handle);
  }
}

bool CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_dirty_v1(
    void* thisClassHdl,
    const KODI_ADDON_WEB_HDL hdl,
    const WEB_KODI_CONTROL handle) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_web.v1.control_dirty)
  {
    auto_gen_ret = union_data->types.kodi_addon_web.v1.control_dirty(union_data->hdl, handle);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_on_init_v1(
    void* thisClassHdl,
    const KODI_ADDON_WEB_HDL hdl,
    const WEB_KODI_CONTROL handle) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_web.v1.control_on_init)
  {
    auto_gen_ret = union_data->types.kodi_addon_web.v1.control_on_init(union_data->hdl, handle);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_on_action_v1(
    void* thisClassHdl,
    const KODI_ADDON_WEB_HDL hdl,
    const WEB_KODI_CONTROL handle,
    const struct KODI_ADDON_ACTION_DATA* action,
    int* nextItem) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_web.v1.control_on_action)
  {
    auto_gen_ret = union_data->types.kodi_addon_web.v1.control_on_action(union_data->hdl, handle,
                                                                         action, nextItem);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_on_mouse_event_v1(
    void* thisClassHdl,
    const KODI_ADDON_WEB_HDL hdl,
    const WEB_KODI_CONTROL handle,
    int id,
    double x,
    double y,
    double offsetX,
    double offsetY,
    int state) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_web.v1.control_on_mouse_event)
  {
    auto_gen_ret = union_data->types.kodi_addon_web.v1.control_on_mouse_event(
        union_data->hdl, handle, id, x, y, offsetX, offsetY, state);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_open_website_v1(
    void* thisClassHdl,
    const KODI_ADDON_WEB_HDL hdl,
    const WEB_KODI_CONTROL handle,
    const char* url) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_web.v1.control_open_website)
  {
    auto_gen_ret =
        union_data->types.kodi_addon_web.v1.control_open_website(union_data->hdl, handle, url);
  }
  return auto_gen_ret;
}

bool CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_get_history_v1(
    void* thisClassHdl,
    const KODI_ADDON_WEB_HDL hdl,
    const WEB_KODI_CONTROL handle,
    char*** list,
    size_t* entries,
    bool behind_current) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return false;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  bool auto_gen_ret = false;
  if (union_data->types.kodi_addon_web.v1.control_get_history)
  {
    auto_gen_ret = union_data->types.kodi_addon_web.v1.control_get_history(
        union_data->hdl, handle, list, entries, behind_current);
  }
  return auto_gen_ret;
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_search_text_v1(
    void* thisClassHdl,
    const KODI_ADDON_WEB_HDL hdl,
    const WEB_KODI_CONTROL handle,
    const char* text,
    bool forward,
    bool matchCase,
    bool findNext) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_web.v1.control_search_text)
  {
    union_data->types.kodi_addon_web.v1.control_search_text(union_data->hdl, handle, text, forward,
                                                            matchCase, findNext);
  }
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_stop_search_v1(
    void* thisClassHdl,
    const KODI_ADDON_WEB_HDL hdl,
    const WEB_KODI_CONTROL handle,
    bool clearSelection) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_web.v1.control_stop_search)
  {
    union_data->types.kodi_addon_web.v1.control_stop_search(union_data->hdl, handle,
                                                            clearSelection);
  }
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_web_cmd_reload_v1(
    void* thisClassHdl,
    const KODI_ADDON_WEB_HDL hdl,
    const WEB_KODI_CONTROL handle) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_web.v1.control_web_cmd_reload)
  {
    union_data->types.kodi_addon_web.v1.control_web_cmd_reload(union_data->hdl, handle);
  }
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_web_cmd_stop_load_v1(
    void* thisClassHdl,
    const KODI_ADDON_WEB_HDL hdl,
    const WEB_KODI_CONTROL handle) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_web.v1.control_web_cmd_stop_load)
  {
    union_data->types.kodi_addon_web.v1.control_web_cmd_stop_load(union_data->hdl, handle);
  }
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_web_cmd_nav_back_v1(
    void* thisClassHdl,
    const KODI_ADDON_WEB_HDL hdl,
    const WEB_KODI_CONTROL handle) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_web.v1.control_web_cmd_nav_back)
  {
    union_data->types.kodi_addon_web.v1.control_web_cmd_nav_back(union_data->hdl, handle);
  }
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_web_cmd_nav_forward_v1(
    void* thisClassHdl,
    const KODI_ADDON_WEB_HDL hdl,
    const WEB_KODI_CONTROL handle) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_web.v1.control_web_cmd_nav_forward)
  {
    union_data->types.kodi_addon_web.v1.control_web_cmd_nav_forward(union_data->hdl, handle);
  }
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_web_open_own_context_menu_v1(
    void* thisClassHdl,
    const KODI_ADDON_WEB_HDL hdl,
    const WEB_KODI_CONTROL handle) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_web.v1.control_web_open_own_context_menu)
  {
    union_data->types.kodi_addon_web.v1.control_web_open_own_context_menu(union_data->hdl, handle);
  }
}

void CHdl_kodi_addoninstance_web_h::kodi_addon_web_control_screen_size_change_v1(
    void* thisClassHdl,
    const KODI_ADDON_WEB_HDL hdl,
    const WEB_KODI_CONTROL handle,
    float x,
    float y,
    float width,
    float height,
    bool fullscreen) // Added with API 1
{
  auto thisClass = reinterpret_cast<CHdl_kodi_addoninstance_web_h*>(thisClassHdl);
  if (thisClass == nullptr)
    return;

  UnionAddonFunctions* union_data = reinterpret_cast<UnionAddonFunctions*>(hdl);
  if (union_data->types.kodi_addon_web.v1.control_screen_size_change)
  {
    union_data->types.kodi_addon_web.v1.control_screen_size_change(union_data->hdl, handle, x, y,
                                                                   width, height, fullscreen);
  }
}

} /* namespace INTERNAL */
} /* namespace KODI_ADDON */

ATTR_DLL_EXPORT void kodi_addon_web_inhibit_shutdown(KODI_ADDON_INSTANCE_BACKEND_HDL hdl,
                                                     bool inhibit)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_web_inhibit_shutdown(KODI_ADDON_INSTANCE_BACKEND_HDL hdl, bool inhibit); __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue, bool> msgParent__IN_kodi_addon_web_inhibit_shutdown_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_web_inhibit_shutdown_v1; /* Autogenerated */

  if (hdl == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgParent__IN_kodi_addon_web_inhibit_shutdown_v1(PtrValue(hdl), inhibit));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
        funcGroup_addoninstance_web_h, funcParent_kodi_addon_web_inhibit_shutdown_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_web_h;
  auto_gen_group.kodi_addon_web_inhibit_shutdown_v1(auto_gen_group.thisClassHdl, hdl, inhibit);
}

ATTR_DLL_EXPORT void kodi_addon_web_inhibit_screensaver(KODI_ADDON_INSTANCE_BACKEND_HDL hdl,
                                                        bool inhibit)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_web_inhibit_screensaver(KODI_ADDON_INSTANCE_BACKEND_HDL hdl, bool inhibit); __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue, bool> msgParent__IN_kodi_addon_web_inhibit_screensaver_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_web_inhibit_screensaver_v1; /* Autogenerated */

  if (hdl == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgParent__IN_kodi_addon_web_inhibit_screensaver_v1(PtrValue(hdl), inhibit));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
        funcGroup_addoninstance_web_h, funcParent_kodi_addon_web_inhibit_screensaver_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_web_h;
  auto_gen_group.kodi_addon_web_inhibit_screensaver_v1(auto_gen_group.thisClassHdl, hdl, inhibit);
}

ATTR_DLL_EXPORT bool kodi_addon_web_is_muted(KODI_ADDON_INSTANCE_BACKEND_HDL hdl)
{
  // Original API call: ATTR_DLL_EXPORT bool kodi_addon_web_is_muted(KODI_ADDON_INSTANCE_BACKEND_HDL hdl); __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue> msgParent__IN_kodi_addon_web_is_muted_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<bool> msgParent_OUT_kodi_addon_web_is_muted_v1; /* Autogenerated */

  if (hdl == nullptr)
    return false;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::sbuffer out;
    msgpack::pack(in, msgParent__IN_kodi_addon_web_is_muted_v1(PtrValue(hdl)));
    if (!AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
            funcGroup_addoninstance_web_h, funcParent_kodi_addon_web_is_muted_v1, in, out))
      return false;
    msgpack::unpacked ident = msgpack::unpack(out.data(), out.size());
    msgParent_OUT_kodi_addon_web_is_muted_v1 t = ident.get().as<decltype(t)>();

    return std::get<0>(t);
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_web_h;
  return auto_gen_group.kodi_addon_web_is_muted_v1(auto_gen_group.thisClassHdl, hdl);
}

ATTR_DLL_EXPORT void kodi_addon_web_control_set_control_ready(KODI_ADDON_INSTANCE_BACKEND_HDL hdl,
                                                              WEB_KODI_CONTROL handle,
                                                              bool ready)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_web_control_set_control_ready(KODI_ADDON_INSTANCE_BACKEND_HDL hdl, WEB_KODI_CONTROL handle, bool ready); __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, bool> msgParent__IN_kodi_addon_web_control_set_control_ready_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_web_control_set_control_ready_v1; /* Autogenerated */

  if (hdl == nullptr || handle == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgParent__IN_kodi_addon_web_control_set_control_ready_v1(
                          PtrValue(hdl), PtrValue(handle), ready));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
        funcGroup_addoninstance_web_h, funcParent_kodi_addon_web_control_set_control_ready_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_web_h;
  auto_gen_group.kodi_addon_web_control_set_control_ready_v1(auto_gen_group.thisClassHdl, hdl,
                                                             handle, ready);
}

ATTR_DLL_EXPORT void kodi_addon_web_control_set_opened_address(KODI_ADDON_INSTANCE_BACKEND_HDL hdl,
                                                               WEB_KODI_CONTROL handle,
                                                               const char* title)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_web_control_set_opened_address(KODI_ADDON_INSTANCE_BACKEND_HDL hdl, WEB_KODI_CONTROL handle, const char* title); __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, std::string> msgParent__IN_kodi_addon_web_control_set_opened_address_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_web_control_set_opened_address_v1; /* Autogenerated */

  if (hdl == nullptr || handle == nullptr || title == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgParent__IN_kodi_addon_web_control_set_opened_address_v1(
                          PtrValue(hdl), PtrValue(handle), title));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
        funcGroup_addoninstance_web_h, funcParent_kodi_addon_web_control_set_opened_address_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_web_h;
  auto_gen_group.kodi_addon_web_control_set_opened_address_v1(auto_gen_group.thisClassHdl, hdl,
                                                              handle, title);
}

ATTR_DLL_EXPORT void kodi_addon_web_control_set_opened_title(KODI_ADDON_INSTANCE_BACKEND_HDL hdl,
                                                             WEB_KODI_CONTROL handle,
                                                             const char* title)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_web_control_set_opened_title(KODI_ADDON_INSTANCE_BACKEND_HDL hdl, WEB_KODI_CONTROL handle, const char* title); __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, std::string> msgParent__IN_kodi_addon_web_control_set_opened_title_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_web_control_set_opened_title_v1; /* Autogenerated */

  if (hdl == nullptr || handle == nullptr || title == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgParent__IN_kodi_addon_web_control_set_opened_title_v1(
                          PtrValue(hdl), PtrValue(handle), title));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
        funcGroup_addoninstance_web_h, funcParent_kodi_addon_web_control_set_opened_title_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_web_h;
  auto_gen_group.kodi_addon_web_control_set_opened_title_v1(auto_gen_group.thisClassHdl, hdl,
                                                            handle, title);
}

ATTR_DLL_EXPORT void kodi_addon_web_control_set_icon_url(KODI_ADDON_INSTANCE_BACKEND_HDL hdl,
                                                         WEB_KODI_CONTROL handle,
                                                         const char* icon)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_web_control_set_icon_url(KODI_ADDON_INSTANCE_BACKEND_HDL hdl, WEB_KODI_CONTROL handle, const char* icon); __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, std::string> msgParent__IN_kodi_addon_web_control_set_icon_url_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_web_control_set_icon_url_v1; /* Autogenerated */

  if (hdl == nullptr || handle == nullptr || icon == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgParent__IN_kodi_addon_web_control_set_icon_url_v1(PtrValue(hdl),
                                                                           PtrValue(handle), icon));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
        funcGroup_addoninstance_web_h, funcParent_kodi_addon_web_control_set_icon_url_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_web_h;
  auto_gen_group.kodi_addon_web_control_set_icon_url_v1(auto_gen_group.thisClassHdl, hdl, handle,
                                                        icon);
}

ATTR_DLL_EXPORT void kodi_addon_web_control_set_fullscreen(KODI_ADDON_INSTANCE_BACKEND_HDL hdl,
                                                           WEB_KODI_CONTROL handle,
                                                           bool fullscreen)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_web_control_set_fullscreen(KODI_ADDON_INSTANCE_BACKEND_HDL hdl, WEB_KODI_CONTROL handle, bool fullscreen); __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, bool> msgParent__IN_kodi_addon_web_control_set_fullscreen_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_web_control_set_fullscreen_v1; /* Autogenerated */

  if (hdl == nullptr || handle == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgParent__IN_kodi_addon_web_control_set_fullscreen_v1(
                          PtrValue(hdl), PtrValue(handle), fullscreen));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
        funcGroup_addoninstance_web_h, funcParent_kodi_addon_web_control_set_fullscreen_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_web_h;
  auto_gen_group.kodi_addon_web_control_set_fullscreen_v1(auto_gen_group.thisClassHdl, hdl, handle,
                                                          fullscreen);
}

ATTR_DLL_EXPORT void kodi_addon_web_control_set_loading_state(KODI_ADDON_INSTANCE_BACKEND_HDL hdl,
                                                              WEB_KODI_CONTROL handle,
                                                              bool isLoading,
                                                              bool canGoBack,
                                                              bool canGoForward)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_web_control_set_loading_state(KODI_ADDON_INSTANCE_BACKEND_HDL hdl, WEB_KODI_CONTROL handle, bool isLoading, bool canGoBack, bool canGoForward); __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, bool, bool, bool> msgParent__IN_kodi_addon_web_control_set_loading_state_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_web_control_set_loading_state_v1; /* Autogenerated */

  if (hdl == nullptr || handle == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgParent__IN_kodi_addon_web_control_set_loading_state_v1(
                          PtrValue(hdl), PtrValue(handle), isLoading, canGoBack, canGoForward));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
        funcGroup_addoninstance_web_h, funcParent_kodi_addon_web_control_set_loading_state_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_web_h;
  auto_gen_group.kodi_addon_web_control_set_loading_state_v1(
      auto_gen_group.thisClassHdl, hdl, handle, isLoading, canGoBack, canGoForward);
}

ATTR_DLL_EXPORT void kodi_addon_web_control_set_tooltip(KODI_ADDON_INSTANCE_BACKEND_HDL hdl,
                                                        WEB_KODI_CONTROL handle,
                                                        const char* tooltip)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_web_control_set_tooltip(KODI_ADDON_INSTANCE_BACKEND_HDL hdl, WEB_KODI_CONTROL handle, const char* tooltip); __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, std::string> msgParent__IN_kodi_addon_web_control_set_tooltip_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_web_control_set_tooltip_v1; /* Autogenerated */

  if (hdl == nullptr || handle == nullptr || tooltip == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgParent__IN_kodi_addon_web_control_set_tooltip_v1(
                          PtrValue(hdl), PtrValue(handle), tooltip));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
        funcGroup_addoninstance_web_h, funcParent_kodi_addon_web_control_set_tooltip_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_web_h;
  auto_gen_group.kodi_addon_web_control_set_tooltip_v1(auto_gen_group.thisClassHdl, hdl, handle,
                                                       tooltip);
}

ATTR_DLL_EXPORT void kodi_addon_web_control_set_status_message(KODI_ADDON_INSTANCE_BACKEND_HDL hdl,
                                                               WEB_KODI_CONTROL handle,
                                                               const char* status)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_web_control_set_status_message(KODI_ADDON_INSTANCE_BACKEND_HDL hdl, WEB_KODI_CONTROL handle, const char* status); __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, std::string> msgParent__IN_kodi_addon_web_control_set_status_message_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_web_control_set_status_message_v1; /* Autogenerated */

  if (hdl == nullptr || handle == nullptr || status == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgParent__IN_kodi_addon_web_control_set_status_message_v1(
                          PtrValue(hdl), PtrValue(handle), status));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
        funcGroup_addoninstance_web_h, funcParent_kodi_addon_web_control_set_status_message_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_web_h;
  auto_gen_group.kodi_addon_web_control_set_status_message_v1(auto_gen_group.thisClassHdl, hdl,
                                                              handle, status);
}

ATTR_DLL_EXPORT void kodi_addon_web_control_request_open_site_in_new_tab(
    KODI_ADDON_INSTANCE_BACKEND_HDL hdl, WEB_KODI_CONTROL handle, const char* url)
{
  // Original API call: ATTR_DLL_EXPORT void kodi_addon_web_control_request_open_site_in_new_tab(KODI_ADDON_INSTANCE_BACKEND_HDL hdl, WEB_KODI_CONTROL handle, const char* url); __INTRODUCED_IN_KODI(1);
  // Tuple in:          typedef std::tuple<PtrValue, PtrValue, std::string> msgParent__IN_kodi_addon_web_control_request_open_site_in_new_tab_v1; /* Autogenerated */
  // Tuple out:         typedef std::tuple<DummyValue> msgParent_OUT_kodi_addon_web_control_request_open_site_in_new_tab_v1; /* Autogenerated */

  if (hdl == nullptr || handle == nullptr || url == nullptr)
    return;

#ifndef KODI_INHIBIT_SHARED
  if (!AddonIfc::g_ifc->direct_used)
  {
    msgpack::sbuffer in;
    msgpack::pack(in, msgParent__IN_kodi_addon_web_control_request_open_site_in_new_tab_v1(
                          PtrValue(hdl), PtrValue(handle), url));
    AddonIfc::g_ifc->control->GetThreadIfc()->SendMessage(
        funcGroup_addoninstance_web_h,
        funcParent_kodi_addon_web_control_request_open_site_in_new_tab_v1, in);
    return;
  }
#endif /* !KODI_INHIBIT_SHARED */

  const auto& auto_gen_group = AddonIfc::g_ifc->direct->to_kodi.addoninstance_web_h;
  auto_gen_group.kodi_addon_web_control_request_open_site_in_new_tab_v1(auto_gen_group.thisClassHdl,
                                                                        hdl, handle, url);
}

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_4_END>---*/
