# Addon helper library generator to allow operation between him and Kodi
#
# WARNING: This CMakeLists.txt is not complete autogenerated and need edited by
#          hand.
#
project(kodidevkit)

include(../../cmake/Macros.cmake)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR})

include_directories(${CMAKE_CURRENT_SOURCE_DIR}
                    ${CMAKE_CURRENT_SOURCE_DIR}/../..)

message(STATUS "kodidevkit Version: ${__KDK_MAJOR__}.${__KDK_MINOR__}.${__KDK_BETA__}")

if(APP_RENDER_SYSTEM STREQUAL "gl" OR NOT APP_RENDER_SYSTEM)
  find_package(OpenGl REQUIRED)
  find_package(EGL REQUIRED)
  set(${PROJECT_NAME}_DEPLIBS ${OPENGL_LIBRARIES} ${EGL_LIBRARIES})
  set(${PROJECT_NAME}_INCLUDES ${OPENGL_INCLUDE_DIR} ${EGL_INCLUDE_DIR})
  set(${PROJECT_NAME}_DEFINITIONS ${OPENGL_DEFINITIONS})
else()
  find_package(OpenGLES REQUIRED)
  set(${PROJECT_NAME}_DEPLIBS ${OPENGLES_LIBRARIES})
  set(${PROJECT_NAME}_INCLUDES ${OPENGLES_INCLUDE_DIR})
  set(${PROJECT_NAME}_DEFINITIONS ${OPENGLES_DEFINITIONS})
endif()

#---AUTO_GEN_PARSE<CMAKE_SUBDIRS>---
add_subdirectory(api)
add_subdirectory(api/addon-instance)
add_subdirectory(api/dl)
add_subdirectory(api/gui)
add_subdirectory(api/gui/controls)
add_subdirectory(api/gui/dialogs)
add_subdirectory(core)
add_subdirectory(third_party/backward-cpp)
#---AUTO_GEN_PARSE<CMAKE_SUBDIRS_END>---

cmake_parse_arguments(arg "WRAPPED" "DEVKIT_OUTPUT_DIRECTORY" "" ${ARGN})
if(arg_DEVKIT_OUTPUT_DIRECTORY)
  set(DEVKIT_OUTPUT_DIRECTORY ${arg_DEVKIT_OUTPUT_DIRECTORY})
else()
  set(DEVKIT_OUTPUT_DIRECTORY "addons/kodi.binary.devkit")
endif()

if(CORE_SYSTEM_NAME STREQUAL windows)
  set(OUTPUT_NAME ${CMAKE_SHARED_LIBRARY_PREFIX}${PROJECT_NAME})
else()
  set(OUTPUT_NAME ${CMAKE_SHARED_LIBRARY_PREFIX}${PROJECT_NAME}-${ARCH})
endif()

set(DEVKIT_LIBRARY ${OUTPUT_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX} CACHE STRING "Library used for dev-kit")

add_library(${PROJECT_NAME} SHARED ${DEV_KIT_HEADER}
                                   ${DEVKIT_OBJECTS}
                                   $<TARGET_OBJECTS:devkit_shared>
                                   $<TARGET_OBJECTS:backward_object>)
add_backward(${PROJECT_NAME})
target_compile_definitions(${PROJECT_NAME} PRIVATE ${BACKWARD_DEFINITIONS} ${${PROJECT_NAME}_DEFINITIONS})
set_target_properties(${PROJECT_NAME} PROPERTIES C_VISIBILITY_PRESET hidden
                                                 CXX_VISIBILITY_PRESET hidden
                                                 VISIBILITY_INLINES_HIDDEN ON
                                                 POSITION_INDEPENDENT_CODE ON
                                                 LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${DEVKIT_OUTPUT_DIRECTORY}
                                                 RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/${DEVKIT_OUTPUT_DIRECTORY}
                                                 OUTPUT_NAME ${OUTPUT_NAME} PREFIX "")
target_include_directories(${PROJECT_NAME} PRIVATE ${${PROJECT_NAME}_INCLUDES})
foreach(OUTPUTCONFIG ${CMAKE_CONFIGURATION_TYPES})
  string(TOUPPER ${OUTPUTCONFIG} OUTPUTCONFIG)
  set_target_properties(${name} PROPERTIES  LIBRARY_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR}/${DEVKIT_OUTPUT_DIRECTORY}
                                            RUNTIME_OUTPUT_DIRECTORY_${OUTPUTCONFIG} ${CMAKE_BINARY_DIR}/${DEVKIT_OUTPUT_DIRECTORY})
endforeach()

if(CORE_SYSTEM_NAME STREQUAL android)
  message(FATAL_ERROR "OS currently not supported and in TODO!!!")
elseif(CORE_SYSTEM_NAME STREQUAL darwin_embedded)
  add_definitions(-DKODI_INHIBIT_SHARED)
  message(FATAL_ERROR "OS currently not supported and in TODO!!!")
elseif(CORE_SYSTEM_NAME STREQUAL freebsd)
  message(FATAL_ERROR "OS currently not supported and in TODO!!!")
elseif(CORE_SYSTEM_NAME STREQUAL linux)
  target_link_libraries(${PROJECT_NAME} PRIVATE -static-libgcc -static-libstdc++ m c rt pthread ${${PROJECT_NAME}_DEPLIBS} dw)
  #target_link_libraries(${PROJECT_NAME} PUBLIC stdc++ gcc pthread m c rt )

  # Remove as splitted dwarf not works currently in included "backward-cpp" and further should on
  # user installed add-ons some debug infos available.
  remove_flag_from_target(${PROJECT_NAME} -gsplit-dwarf)
elseif(CORE_SYSTEM_NAME STREQUAL osx)
  message(FATAL_ERROR "OS currently not supported and in TODO!!!")
elseif(CORE_SYSTEM_NAME STREQUAL windows)
  message(FATAL_ERROR "OS currently not supported and in TODO!!!")
else()
  message(FATAL_ERROR "Not supported OS '${CORE_SYSTEM_NAME}' used for kodi-dev-kit!")
endif()

set(LIBRARY_FILES ${LIBRARY_FILES} ${CMAKE_BINARY_DIR}/${DEVKIT_OUTPUT_DIRECTORY}/${OUTPUT_NAME}${CMAKE_SHARED_LIBRARY_SUFFIX} CACHE STRING "" FORCE)
