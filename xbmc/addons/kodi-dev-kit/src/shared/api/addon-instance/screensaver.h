/*
 *  Copyright (C) 2005-2022 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#pragma once

#include "../../../../include/kodi/c-api/addon-instance/screensaver.h"
#include "src/shared/SharedGroups.h"

#include <string.h>
#include <string>
#include <tuple>
#include <vector>

/* API struct from 1 to 1 */
typedef struct KODI_ADDON_SCREENSAVER_FUNC_V1_TO_V1
{
  PFN_KODI_ADDON_INSTANCE_CREATE_V1 create; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_INSTANCE_DESTROY_V1 destroy; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_SCREENSAVER_START_V1 start; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_SCREENSAVER_STOP_V1 stop; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_SCREENSAVER_RENDER_V1 render; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
} KODI_ADDON_SCREENSAVER_FUNC_V1_TO_V1;

union KODI_ADDON_SCREENSAVER_FUNC_UNION
{
  struct KODI_ADDON_SCREENSAVER_FUNC_V1_TO_V1 v1;
};

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

namespace KODI
{
namespace ADDONS
{
namespace INTERFACE
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

// Code here relates to direct API calls without use of shared mem from addon to Kodi.
//{{{

typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_SCREENSAVER_GET_PROPERTIES_V1)(
    void*, const KODI_ADDON_INSTANCE_BACKEND_HDL, struct KODI_ADDON_SCREENSAVER_PROPS*);

struct directFuncToKodi_addoninstance_screensaver_h
{
  void* thisClassHdl;
  PFN_INT_KODI_ADDON_SCREENSAVER_GET_PROPERTIES_V1 kodi_addon_screensaver_get_properties_v1;
};

//}}}

// Code here relates to direct API calls without use of shared mem from Kodi to addon.
//{{{

typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_SCREENSAVER_START_V1)(
    void*, const KODI_ADDON_SCREENSAVER_HDL);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_SCREENSAVER_RENDER_V1)(
    void*, const KODI_ADDON_SCREENSAVER_HDL);
typedef void(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_SCREENSAVER_STOP_V1)(
    void*, const KODI_ADDON_SCREENSAVER_HDL);

struct directFuncToAddon_addoninstance_screensaver_h
{
  void* thisClassHdl;
  PFN_INT_KODI_ADDON_SCREENSAVER_RENDER_V1 kodi_addon_screensaver_render_v1;
  PFN_INT_KODI_ADDON_SCREENSAVER_START_V1 kodi_addon_screensaver_start_v1;
  PFN_INT_KODI_ADDON_SCREENSAVER_STOP_V1 kodi_addon_screensaver_stop_v1;
};

//}}}

/* Confirm after autogen the correctness here! */
/*---AUTO_GEN_PARSE<DATA_STRUCTURES>---*/

struct IFC_KODI_ADDON_SCREENSAVER_PROPS
{
  IFC_KODI_ADDON_SCREENSAVER_PROPS() = default;
  IFC_KODI_ADDON_SCREENSAVER_PROPS(const KODI_ADDON_SCREENSAVER_PROPS* c_data)
  {
    if (c_data == nullptr)
      return;

    device = PtrValue(c_data->device);
    x = c_data->x;
    y = c_data->y;
    width = c_data->width;
    height = c_data->height;
    pixelRatio = c_data->pixelRatio;
  }

  void SetCStructure(KODI_ADDON_SCREENSAVER_PROPS* c_data)
  {
    if (c_data == nullptr)
      return;

    c_data->device = reinterpret_cast<ADDON_HARDWARE_CONTEXT>(device);
    c_data->x = x;
    c_data->y = y;
    c_data->width = width;
    c_data->height = height;
    c_data->pixelRatio = pixelRatio;
  }

  PtrValue device;
  int x;
  int y;
  int width;
  int height;
  float pixelRatio;

  MSGPACK_DEFINE(device, x, y, width, height, pixelRatio);
};
/*---AUTO_GEN_PARSE<DATA_STRUCTURES_END>---*/

typedef enum funcParent_addoninstance_screensaver_h : int
{
  funcParent_kodi_addon_screensaver_get_properties_v1,
} funcParent_addoninstance_screensaver_h;

// clang-format off
/*---AUTO_GEN_PARSE<FUNC_PARENT_TUPLES>---*/
// Original API call: ATTR_DLL_EXPORT void kodi_addon_screensaver_get_properties( const KODI_ADDON_INSTANCE_BACKEND_HDL hdl, struct KODI_ADDON_SCREENSAVER_PROPS* props) __INTRODUCED_IN_KODI(1);
typedef std::tuple<PtrValue> msgParent__IN_kodi_addon_screensaver_get_properties_v1; /* Autogenerated */
typedef std::tuple<IFC_KODI_ADDON_SCREENSAVER_PROPS> msgParent_OUT_kodi_addon_screensaver_get_properties_v1; /* Autogenerated */
/*---AUTO_GEN_PARSE<FUNC_PARENT_TUPLES_END>---*/
// clang-format on

//==============================================================================

typedef enum funcChild_addoninstance_screensaver_h : int
{
  funcChild_kodi_addon_screensaver_start_v1,
  funcChild_kodi_addon_screensaver_stop_v1,
  funcChild_kodi_addon_screensaver_render_v1,
} funcChild_addoninstance_screensaver_h;

// clang-format off
/*---AUTO_GEN_PARSE<FUNC_CHILD_TUPLES>---*/
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_SCREENSAVER_START_V1)(const KODI_ADDON_SCREENSAVER_HDL hdl);
typedef std::tuple<PtrKodiOffscreen, uint64_t, int, int, int, int, PtrValue /* < Offscreen render */, PtrValue> msgChild__IN_kodi_addon_screensaver_start_v1; /* Autogenerated */
typedef std::tuple<bool, PtrAddonOffscreen, bool /* < Offscreen render */> msgChild_OUT_kodi_addon_screensaver_start_v1; /* Autogenerated */
// Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_SCREENSAVER_STOP_V1)(const KODI_ADDON_SCREENSAVER_HDL hdl);
typedef std::tuple<PtrAddonOffscreen /* < Offscreen render */, PtrValue> msgChild__IN_kodi_addon_screensaver_stop_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_screensaver_stop_v1; /* Autogenerated */
// Original API call: typedef void(ATTR_APIENTRYP PFN_KODI_ADDON_SCREENSAVER_RENDER_V1)(const KODI_ADDON_SCREENSAVER_HDL hdl);
typedef std::tuple<PtrAddonOffscreen /* < Offscreen render */, PtrValue> msgChild__IN_kodi_addon_screensaver_render_v1; /* Autogenerated */
typedef std::tuple<DummyValue> msgChild_OUT_kodi_addon_screensaver_render_v1; /* Autogenerated */
/*---AUTO_GEN_PARSE<FUNC_CHILD_TUPLES_END>---*/
// clang-format on

} /* namespace INTERFACE */
} /* namespace ADDONS */
} /* namespace KODI */
