/*
 *  Copyright (C) 2005-2022 Team Kodi
 *  This file is part of Kodi - https://kodi.tv
 *
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  See LICENSES/README.md for more information.
 */

/* File autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator/code_generator.py */

#pragma once

#include "../../../../include/kodi/c-api/addon-instance/imagedecoder.h"
#include "src/shared/SharedGroups.h"

#include <string.h>
#include <string>
#include <tuple>
#include <vector>

/* API struct from 1 to 1 */
typedef struct KODI_ADDON_IMAGEDECODER_FUNC_V1_TO_V1
{
  PFN_KODI_ADDON_INSTANCE_CREATE_V1 create; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_INSTANCE_DESTROY_V1 destroy; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_IMAGEDECODER_SUPPORTS_FILE_V1 supports_file; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_IMAGEDECODER_READ_TAG_V1 read_tag; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_IMAGEDECODER_LOAD_IMAGE_FROM_MEMORY_V1
      load_image_from_memory; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
  PFN_KODI_ADDON_IMAGEDECODER_DECODE_V1 decode; /*---AUTO<EQUAL_FROM_TO:1_1>---*/
} KODI_ADDON_IMAGEDECODER_FUNC_V1_TO_V1;

union KODI_ADDON_IMAGEDECODER_FUNC_UNION
{
  struct KODI_ADDON_IMAGEDECODER_FUNC_V1_TO_V1 v1;
};

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_1_END>---*/

#ifndef MSGPACK_ADD_ENUM_ADDON_IMG_ORIENTATION
#define MSGPACK_ADD_ENUM_ADDON_IMG_ORIENTATION
MSGPACK_ADD_ENUM(ADDON_IMG_ORIENTATION);
#endif
#ifndef MSGPACK_ADD_ENUM_ADDON_IMG_COLOR
#define MSGPACK_ADD_ENUM_ADDON_IMG_COLOR
MSGPACK_ADD_ENUM(ADDON_IMG_COLOR);
#endif
#ifndef MSGPACK_ADD_ENUM_ADDON_IMG_METERING_MODE
#define MSGPACK_ADD_ENUM_ADDON_IMG_METERING_MODE
MSGPACK_ADD_ENUM(ADDON_IMG_METERING_MODE);
#endif
#ifndef MSGPACK_ADD_ENUM_ADDON_IMG_EXPOSURE_PROGRAM
#define MSGPACK_ADD_ENUM_ADDON_IMG_EXPOSURE_PROGRAM
MSGPACK_ADD_ENUM(ADDON_IMG_EXPOSURE_PROGRAM);
#endif
#ifndef MSGPACK_ADD_ENUM_ADDON_IMG_EXPOSURE_MODE
#define MSGPACK_ADD_ENUM_ADDON_IMG_EXPOSURE_MODE
MSGPACK_ADD_ENUM(ADDON_IMG_EXPOSURE_MODE);
#endif
#ifndef MSGPACK_ADD_ENUM_ADDON_IMG_FLASH_TYPE
#define MSGPACK_ADD_ENUM_ADDON_IMG_FLASH_TYPE
MSGPACK_ADD_ENUM(ADDON_IMG_FLASH_TYPE);
#endif
#ifndef MSGPACK_ADD_ENUM_ADDON_IMG_LIGHT_SOURCE
#define MSGPACK_ADD_ENUM_ADDON_IMG_LIGHT_SOURCE
MSGPACK_ADD_ENUM(ADDON_IMG_LIGHT_SOURCE);
#endif
#ifndef MSGPACK_ADD_ENUM_ADDON_IMG_FMT
#define MSGPACK_ADD_ENUM_ADDON_IMG_FMT
MSGPACK_ADD_ENUM(ADDON_IMG_FMT);
#endif

namespace KODI
{
namespace ADDONS
{
namespace INTERFACE
{

/* Code below becomes on auto generation reused, hand edited parts should included here */
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2>---*/
/*---AUTO_GEN_PARSE<HAND_EDITED_FIELD_2_END>---*/

// Code here relates to direct API calls without use of shared mem from addon to Kodi.
//{{{

struct directFuncToKodi_addoninstance_imagedecoder_h
{
  void* thisClassHdl;
};

//}}}

// Code here relates to direct API calls without use of shared mem from Kodi to addon.
//{{{

typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_IMAGEDECODER_DECODE_V1)(
    void*,
    const KODI_ADDON_IMAGEDECODER_HDL,
    uint8_t*,
    size_t,
    unsigned int,
    unsigned int,
    unsigned int,
    enum ADDON_IMG_FMT);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_IMAGEDECODER_LOAD_IMAGE_FROM_MEMORY_V1)(
    void*,
    const KODI_ADDON_IMAGEDECODER_HDL,
    const char*,
    const uint8_t*,
    size_t,
    unsigned int*,
    unsigned int*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_IMAGEDECODER_READ_TAG_V1)(
    void*,
    const KODI_ADDON_IMAGEDECODER_HDL,
    const char*,
    struct KODI_ADDON_IMAGEDECODER_INFO_TAG*);
typedef bool(ATTR_INT_APIENTRYP PFN_INT_KODI_ADDON_IMAGEDECODER_SUPPORTS_FILE_V1)(
    void*, const KODI_ADDON_IMAGEDECODER_HDL, const char*);

struct directFuncToAddon_addoninstance_imagedecoder_h
{
  void* thisClassHdl;
  PFN_INT_KODI_ADDON_IMAGEDECODER_DECODE_V1 kodi_addon_imagedecoder_decode_v1;
  PFN_INT_KODI_ADDON_IMAGEDECODER_LOAD_IMAGE_FROM_MEMORY_V1
      kodi_addon_imagedecoder_load_image_from_memory_v1;
  PFN_INT_KODI_ADDON_IMAGEDECODER_READ_TAG_V1 kodi_addon_imagedecoder_read_tag_v1;
  PFN_INT_KODI_ADDON_IMAGEDECODER_SUPPORTS_FILE_V1 kodi_addon_imagedecoder_supports_file_v1;
};

//}}}

/* Confirm after autogen the correctness here! */
/*---AUTO_GEN_PARSE<DATA_STRUCTURES>---*/

struct IFC_KODI_ADDON_IMAGEDECODER_INFO_TAG
{
  IFC_KODI_ADDON_IMAGEDECODER_INFO_TAG() = default;
  IFC_KODI_ADDON_IMAGEDECODER_INFO_TAG(const KODI_ADDON_IMAGEDECODER_INFO_TAG* c_data)
  {
    if (c_data == nullptr)
      return;

    width = c_data->width;
    height = c_data->height;
    distance = c_data->distance;
    orientation = c_data->orientation;
    color = c_data->color;
    metering_mode = c_data->metering_mode;
    exposure_time = c_data->exposure_time;
    exposure_bias = c_data->exposure_bias;
    exposure_program = c_data->exposure_program;
    exposure_mode = c_data->exposure_mode;
    time_created = c_data->time_created;
    aperture_f_number = c_data->aperture_f_number;
    flash_used = c_data->flash_used;
    focal_length = c_data->focal_length;
    focal_length_in_35mm_format = c_data->focal_length_in_35mm_format;
    digital_zoom_ratio = c_data->digital_zoom_ratio;
    iso_speed = c_data->iso_speed;
    light_source = c_data->light_source;
    gps_info_present = c_data->gps_info_present;
    latitude_ref = c_data->latitude_ref;
    longitude_ref = c_data->longitude_ref;
    altitude_ref = c_data->altitude_ref;
    altitude = c_data->altitude;
    if (c_data->camera_manufacturer)
      camera_manufacturer = c_data->camera_manufacturer;
    if (c_data->camera_model)
      camera_model = c_data->camera_model;
    if (c_data->author)
      author = c_data->author;
    if (c_data->description)
      description = c_data->description;
    if (c_data->copyright)
      copyright = c_data->copyright;
  }

  static inline void CleanCStructure(KODI_ADDON_IMAGEDECODER_INFO_TAG* c_data)
  {
    if (c_data == nullptr)
      return;

    if (c_data->camera_manufacturer)
    {
      free(c_data->camera_manufacturer);
      c_data->camera_manufacturer = nullptr;
    }
    if (c_data->camera_model)
    {
      free(c_data->camera_model);
      c_data->camera_model = nullptr;
    }
    if (c_data->author)
    {
      free(c_data->author);
      c_data->author = nullptr;
    }
    if (c_data->description)
    {
      free(c_data->description);
      c_data->description = nullptr;
    }
    if (c_data->copyright)
    {
      free(c_data->copyright);
      c_data->copyright = nullptr;
    }
  }

  void SetCStructure(KODI_ADDON_IMAGEDECODER_INFO_TAG* c_data)
  {
    if (c_data == nullptr)
      return;

    c_data->width = width;
    c_data->height = height;
    c_data->distance = distance;
    c_data->orientation = orientation;
    c_data->color = color;
    c_data->metering_mode = metering_mode;
    c_data->exposure_time = exposure_time;
    c_data->exposure_bias = exposure_bias;
    c_data->exposure_program = exposure_program;
    c_data->exposure_mode = exposure_mode;
    c_data->time_created = time_created;
    c_data->aperture_f_number = aperture_f_number;
    c_data->flash_used = flash_used;
    c_data->focal_length = focal_length;
    c_data->focal_length_in_35mm_format = focal_length_in_35mm_format;
    c_data->digital_zoom_ratio = digital_zoom_ratio;
    c_data->iso_speed = iso_speed;
    c_data->light_source = light_source;
    c_data->gps_info_present = gps_info_present;
    c_data->latitude_ref = latitude_ref;
    c_data->longitude_ref = longitude_ref;
    c_data->altitude_ref = altitude_ref;
    c_data->altitude = altitude;
    if (!camera_manufacturer.empty())
      c_data->camera_manufacturer = strdup(camera_manufacturer.c_str());
    if (!camera_model.empty())
      c_data->camera_model = strdup(camera_model.c_str());
    if (!author.empty())
      c_data->author = strdup(author.c_str());
    if (!description.empty())
      c_data->description = strdup(description.c_str());
    if (!copyright.empty())
      c_data->copyright = strdup(copyright.c_str());
  }

  int width;
  int height;
  float distance;
  enum ADDON_IMG_ORIENTATION orientation;
  enum ADDON_IMG_COLOR color;
  enum ADDON_IMG_METERING_MODE metering_mode;
  float exposure_time;
  float exposure_bias;
  enum ADDON_IMG_EXPOSURE_PROGRAM exposure_program;
  enum ADDON_IMG_EXPOSURE_MODE exposure_mode;
  time_t time_created;
  float aperture_f_number;
  enum ADDON_IMG_FLASH_TYPE flash_used;
  int focal_length;
  int focal_length_in_35mm_format;
  float digital_zoom_ratio;
  float iso_speed;
  enum ADDON_IMG_LIGHT_SOURCE light_source;
  bool gps_info_present;
  char latitude_ref;
  char longitude_ref;
  int altitude_ref;
  float altitude;
  std::string camera_manufacturer;
  std::string camera_model;
  std::string author;
  std::string description;
  std::string copyright;

  MSGPACK_DEFINE(width,
                 height,
                 distance,
                 orientation,
                 color,
                 metering_mode,
                 exposure_time,
                 exposure_bias,
                 exposure_program,
                 exposure_mode,
                 time_created,
                 aperture_f_number,
                 flash_used,
                 focal_length,
                 focal_length_in_35mm_format,
                 digital_zoom_ratio,
                 iso_speed,
                 light_source,
                 gps_info_present,
                 latitude_ref,
                 longitude_ref,
                 altitude_ref,
                 altitude,
                 camera_manufacturer,
                 camera_model,
                 author,
                 description,
                 copyright);
};
/*---AUTO_GEN_PARSE<DATA_STRUCTURES_END>---*/

typedef enum funcParent_addoninstance_imagedecoder_h : int
{
  funcParent_addoninstance_imagedecoder_h_dummy
} funcParent_addoninstance_imagedecoder_h;

// clang-format off
/*---AUTO_GEN_PARSE<FUNC_PARENT_TUPLES>---*/
/*---AUTO_GEN_PARSE<FUNC_PARENT_TUPLES_END>---*/
// clang-format on

//==============================================================================

typedef enum funcChild_addoninstance_imagedecoder_h : int
{
  funcChild_kodi_addon_imagedecoder_supports_file_v1,
  funcChild_kodi_addon_imagedecoder_read_tag_v1,
  funcChild_kodi_addon_imagedecoder_load_image_from_memory_v1,
  funcChild_kodi_addon_imagedecoder_decode_v1,
} funcChild_addoninstance_imagedecoder_h;

// clang-format off
/*---AUTO_GEN_PARSE<FUNC_CHILD_TUPLES>---*/
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_IMAGEDECODER_SUPPORTS_FILE_V1)(const KODI_ADDON_IMAGEDECODER_HDL hdl, const char* file);
typedef std::tuple<PtrValue, std::string> msgChild__IN_kodi_addon_imagedecoder_supports_file_v1; /* Autogenerated */
typedef std::tuple<bool> msgChild_OUT_kodi_addon_imagedecoder_supports_file_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_IMAGEDECODER_READ_TAG_V1)(const KODI_ADDON_IMAGEDECODER_HDL hdl, const char* file, struct KODI_ADDON_IMAGEDECODER_INFO_TAG* info);
typedef std::tuple<PtrValue, std::string> msgChild__IN_kodi_addon_imagedecoder_read_tag_v1; /* Autogenerated */
typedef std::tuple<bool, IFC_KODI_ADDON_IMAGEDECODER_INFO_TAG> msgChild_OUT_kodi_addon_imagedecoder_read_tag_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_IMAGEDECODER_LOAD_IMAGE_FROM_MEMORY_V1)(const KODI_ADDON_IMAGEDECODER_HDL hdl, const char* mimetype, const uint8_t* buffer, size_t buf_size, unsigned int* width, unsigned int* height);
typedef std::tuple<PtrValue, std::string, std::vector<uint8_t>, size_t, unsigned int, unsigned int> msgChild__IN_kodi_addon_imagedecoder_load_image_from_memory_v1; /* Autogenerated */
typedef std::tuple<bool, unsigned int, unsigned int> msgChild_OUT_kodi_addon_imagedecoder_load_image_from_memory_v1; /* Autogenerated */
// Original API call: typedef bool(ATTR_APIENTRYP PFN_KODI_ADDON_IMAGEDECODER_DECODE_V1)(const KODI_ADDON_IMAGEDECODER_HDL hdl, uint8_t* pixels, size_t pixels_size, unsigned int width, unsigned int height, unsigned int pitch, enum ADDON_IMG_FMT format);
typedef std::tuple<PtrValue, size_t, unsigned int, unsigned int, unsigned int, ADDON_IMG_FMT> msgChild__IN_kodi_addon_imagedecoder_decode_v1; /* Autogenerated */
typedef std::tuple<bool, std::vector<uint8_t>> msgChild_OUT_kodi_addon_imagedecoder_decode_v1; /* Autogenerated */
/*---AUTO_GEN_PARSE<FUNC_CHILD_TUPLES_END>---*/
// clang-format on

} /* namespace INTERFACE */
} /* namespace ADDONS */
} /* namespace KODI */
