# -*- coding: utf-8 -*-

#   Copyright (C) 2021-2022 Team Kodi
#   This file is part of Kodi - https://kodi.tv
#
#   SPDX-License-Identifier: GPL-2.0-or-later
#   See LICENSES/README.md for more information.

# Own includes
from code_generator import DEVKIT_DIR, KODI_DIR
from .tools.helper_Log import *

# Global includes
import glob, os, re


def GenerateCMake__XBMC_ADDONS_KODIDEVKIT_SRC_SHARED_cmakelists_txt_RelatedCheck(
    filename,
):
    """
    This function is called by git update to be able to assign changed files to the dev kit.
    """
    filename = "{}{}/src/shared/CMakeLists.txt".format(KODI_DIR, DEVKIT_DIR)
    if source_dir == filename:
        return True

    return False


def GenerateCMake__XBMC_ADDONS_KODIDEVKIT_SRC_SHARED_cmakelists_txt(options):
    """
    This function generate the "CMakeLists.txt" in xbmc/addons/kodi-dev-kit/src/shared
    and sub dirs by scan of available files

    The base CMakeLists.txt is not generated by him and need hand edit.
    """
    Log.PrintBegin("Generate {}/src/shared/CMakeLists.txt".format(DEVKIT_DIR))

    base_dir = "{}{}/src/shared/".format(KODI_DIR, DEVKIT_DIR)
    scan_dir = "{}**/".format(base_dir)

    base_cmake_file = "{}/CMakeLists.txt".format(base_dir)
    if not os.path.exists(base_cmake_file):
        Log.PrintResult(Result.FAILURE)
        Log.PrintFatal(
            "Needed {} not present!".format(base_cmake_file.replace(KODI_DIR, ""))
        )
        exit(1)

    found = False
    os_limits = []
    source_entry = []
    header_entry = []
    dirs = sorted(glob.glob(scan_dir, recursive=True))
    for dir in dirs:
        source_dir = dir.replace(KODI_DIR, "")

        # Scan for *.cpp
        src_parts = sorted(glob.glob("{}*.c*".format(dir), recursive=False))
        for src_part in src_parts:
            with open(src_part) as search:
                for line in search:
                    line = line.rstrip()  # remove '\n' at end of line
                    m = re.search("^\/\*---AUTO_GEN_PARSE<\$\$(.*):(.*)>---\*\/", line)
                    if m:
                        if m.group(1) == "CORE_SYSTEM_NAME":
                            if src_part.endswith(".in"):
                                Log.PrintResult(Result.FAILURE)
                                Log.PrintFatal(
                                    'File extensions with ".h.in" are currently not supported and require revision of Kodi\'s cmake system!'
                                )
                                exit(1)
                            for entry in m.group(2).split(","):
                                entry = entry.strip()
                                if not entry in os_limits:
                                    os_limits.append(entry)
                                source_entry.append(
                                    "$<$<STREQUAL:${{CORE_SYSTEM_NAME}},{}>:{}>".format(
                                        entry,
                                        src_part.replace(
                                            base_dir, "${CMAKE_CURRENT_SOURCE_DIR}/"
                                        ).replace(".in", ""),
                                    )
                                )
                            found = True
                            break
            if not found:
                source_entry.append(
                    src_part.replace(base_dir, "${CMAKE_CURRENT_SOURCE_DIR}/")
                )
            found = False

        # Scan for *.h
        src_parts = sorted(glob.glob("{}*.h*".format(dir), recursive=False))
        for src_part in src_parts:
            with open(src_part) as search:
                for line in search:
                    line = line.rstrip()  # remove '\n' at end of line
                    m = re.search("^\/\*---AUTO_GEN_PARSE<\$\$(.*):(.*)>---\*\/", line)
                    if m:
                        if m.group(1) == "CORE_SYSTEM_NAME":
                            if src_part.endswith(".in"):
                                Log.PrintResult(Result.FAILURE)
                                Log.PrintFatal(
                                    'File extensions with ".h.in" are currently not supported and require revision of Kodi\'s cmake system!'
                                )
                                exit(1)
                            for entry in m.group(2).split(","):
                                entry = entry.strip()
                                if not entry in os_limits:
                                    os_limits.append(entry)
                                header_entry.append(
                                    "$<$<STREQUAL:${{CORE_SYSTEM_NAME}},{}>:{}>".format(
                                        entry,
                                        src_part.replace(
                                            base_dir, "${CMAKE_CURRENT_SOURCE_DIR}/"
                                        ).replace(".in", ""),
                                    )
                                )
                            found = True
                            break
            if not found:
                header_entry.append(
                    src_part.replace(base_dir, "${CMAKE_CURRENT_SOURCE_DIR}/")
                )
            found = False

    CMAKE_SHARED_DEV_KIT_SOURCES = "set(SOURCES\n{})".format(
        "".join("  {}\n".format(entry) for entry in source_entry)
    )

    CMAKE_SHARED_DEV_KIT_HEADERS = "set(HEADERS\n{})".format(
        "".join("  {}\n".format(entry) for entry in header_entry)
    )

    source_file = ""
    f = open(base_cmake_file, "r")
    data = f.read()
    f.close
    start_1 = False
    start_2 = False
    for line in data.splitlines():
        # Source include
        if "---AUTO_GEN_PARSE<CMAKE_SHARED_DEV_KIT_SOURCES>---" in line:
            source_file += line + "\n"
            source_file += "# Code below autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator.py\n"
            start_1 = True
        elif "---AUTO_GEN_PARSE<CMAKE_SHARED_DEV_KIT_SOURCES_END>---" in line:
            source_file += CMAKE_SHARED_DEV_KIT_SOURCES + "\n"
            source_file += line + "\n"
            start_1 = False
        elif start_1:
            continue
        # Header include
        elif "---AUTO_GEN_PARSE<CMAKE_SHARED_DEV_KIT_HEADERS>---" in line:
            source_file += line + "\n"
            source_file += "# Code below autogenerated, see xbmc/addons/kodi-dev-kit/tools/code-generator.py\n"
            start_2 = True
        elif "---AUTO_GEN_PARSE<CMAKE_SHARED_DEV_KIT_HEADERS_END>---" in line:
            source_file += CMAKE_SHARED_DEV_KIT_HEADERS + "\n"
            source_file += line + "\n"
            start_2 = False
        elif start_2:
            continue
        else:
            source_file += line + "\n"

    if start_1 or start_2:
        Log.PrintResult(Result.FAILURE)
        Log.PrintFatal(
            "Needed CMAKE_SHARED_DEV_KIT_SOURCES_END or CMAKE_SHARED_DEV_KIT_HEADERS_END not present in {}!".format(
                base_cmake_file.replace(KODI_DIR, "")
            )
        )
        exit(1)

    if source_file != data or options.force:
        with open(base_cmake_file, "w") as f:
            f.write(source_file)
        Log.PrintResult(Result.UPDATE)
    else:
        Log.PrintResult(Result.ALREADY_DONE)
