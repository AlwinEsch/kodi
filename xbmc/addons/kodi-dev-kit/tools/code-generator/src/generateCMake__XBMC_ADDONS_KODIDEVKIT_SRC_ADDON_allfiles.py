# -*- coding: utf-8 -*-

#   Copyright (C) 2021-2022 Team Kodi
#   This file is part of Kodi - https://kodi.tv
#
#   SPDX-License-Identifier: GPL-2.0-or-later
#   See LICENSES/README.md for more information.

# Own includes
from code_generator import DEVKIT_DIR, KODI_DIR
from .tools.helper_Log import *

# Global includes
import glob, os, re


def GenerateCMake__XBMC_ADDONS_KODIDEVKIT_SRC_ADDON_all_files_RelatedCheck(filename):
    """
    This function is called by git update to be able to assign changed files to the dev kit.
    """
    scan_dir = "{}{}/src/addon/**/".format(KODI_DIR, DEVKIT_DIR)
    dirs = sorted(glob.glob(scan_dir, recursive=True))
    for dir in dirs:
        source_dir = "{}CMakeLists.txt".format(dir.replace(KODI_DIR, ""))
        if source_dir == filename:
            return True

    return False


def GenerateCMake__XBMC_ADDONS_KODIDEVKIT_SRC_ADDON_all_files(options):
    """
    This function generate the "CMakeLists.txt" in xbmc/addons/kodi-dev-kit/src/addon
    and sub dirs by scan of available files

    The base CMakeLists.txt is not generated by him and need hand edit.
    """
    Log.PrintBegin(
        "Generate CMakeLists.txt files in {}/src/addon dirs".format(DEVKIT_DIR)
    )

    scan_dir = "{}{}/src/addon/**/*/".format(KODI_DIR, DEVKIT_DIR)

    base_cmake_subdirs = ""
    base_cmake_file = "{}{}/src/addon/CMakeLists.txt".format(KODI_DIR, DEVKIT_DIR)
    if not os.path.exists(base_cmake_file):
        Log.PrintResult(Result.FAILURE)
        Log.PrintFatal(
            "Needed {} not present!".format(base_cmake_file.replace(KODI_DIR, ""))
        )
        exit(1)
    else:
        Log.PrintResult(Result.SEE_BELOW)

    found = False
    dirs = sorted(glob.glob(scan_dir, recursive=True))
    for dir in dirs:
        source_dir = dir.replace(KODI_DIR, "")

        if "/third_party/" in source_dir:
            if os.path.basename(os.path.dirname(os.path.dirname(dir))) == "third_party":
                Log.PrintBegin(" - Check {}CMakeLists.txt ".format(source_dir))
                Log.PrintFollow("(Used by third party modules)")
                cmake_dir = source_dir[len("{}/src/addon/".format(DEVKIT_DIR)) : -1]
                base_cmake_subdirs += "add_subdirectory(" + cmake_dir + ")\n"
                Log.PrintResult(Result.ALREADY_DONE)
            continue

        Log.PrintBegin(" - Check {}CMakeLists.txt".format(source_dir))

        os_limits = []

        # Scan for *.cpp
        source_entry = []
        src_parts = sorted(glob.glob("{}*.c*".format(dir), recursive=False))
        for src_part in src_parts:
            with open(src_part) as search:
                for line in search:
                    line = line.rstrip()  # remove '\n' at end of line
                    m = re.search("^\/\*---AUTO_GEN_PARSE<\$\$(.*):(.*)>---\*\/", line)
                    if m:
                        if m.group(1) == "CORE_SYSTEM_NAME":
                            if src_part.endswith(".in"):
                                Log.PrintResult(Result.FAILURE)
                                Log.PrintFatal(
                                    'File extensions with ".h.in" are currently not supported and require revision of Kodi\'s cmake system!'
                                )
                                exit(1)
                            for entry in m.group(2).split(","):
                                entry = entry.strip()
                                if not entry in os_limits:
                                    os_limits.append(entry)
                                source_entry.append(
                                    "$<$<STREQUAL:${{CORE_SYSTEM_NAME}},{}>:{}>".format(
                                        entry,
                                        src_part.replace(dir, "").replace(".in", ""),
                                    )
                                )
                            found = True
                            break
            if not found:
                source_entry.append(src_part.replace(dir, ""))
            found = False

        cmake_src_text = "set(SOURCES\n{})\n".format(
            "".join("  {}\n".format(entry) for entry in source_entry)
        )

        # Scan for *.h
        header_entry = []
        src_parts = sorted(glob.glob("{}*.h*".format(dir), recursive=False))
        for src_part in src_parts:
            with open(src_part) as search:
                for line in search:
                    line = line.rstrip()  # remove '\n' at end of line
                    m = re.search("^\/\*---AUTO_GEN_PARSE<\$\$(.*):(.*)>---\*\/", line)
                    if m:
                        if m.group(1) == "CORE_SYSTEM_NAME":
                            if src_part.endswith(".in"):
                                Log.PrintResult(Result.FAILURE)
                                Log.PrintFatal(
                                    'File extensions with ".h.in" are currently not supported and require revision of Kodi\'s cmake system!'
                                )
                                exit(1)
                            for entry in m.group(2).split(","):
                                entry = entry.strip()
                                if not entry in os_limits:
                                    os_limits.append(entry)
                                header_entry.append(
                                    "$<$<STREQUAL:${{CORE_SYSTEM_NAME}},{}>:{}>".format(
                                        entry,
                                        src_part.replace(dir, "").replace(".in", ""),
                                    )
                                )
                            found = True
                            break
            if not found:
                header_entry.append(src_part.replace(dir, ""))
            found = False

        cmake_hdr_text = "set(HEADERS\n{})\n".format(
            "".join("  {}\n".format(entry) for entry in header_entry)
        )

        # Generate cmake sub part name
        cmake_dir = source_dir[len("{}/src/addon/".format(DEVKIT_DIR)) : -1]
        cmake_part = cmake_dir.replace("/", "_").rstrip("_")

        # Make final CMakeLists.txt
        cmake_file = (
            "# Auto generated CMakeLists.txt.\n"
            "# See {}/tools/code-generator.py.\n"
            "\n"
            "{}"
            "\n"
            "{}"
            "\n"
            "if(SOURCES OR HEADERS)\n"
            "  devkit_add_object(devkit_{})\n"
            "endif()\n".format(DEVKIT_DIR, cmake_src_text, cmake_hdr_text, cmake_part)
        )

        file = "{}CMakeLists.txt".format(dir)
        present = os.path.isfile(file)
        if not present or cmake_file != open(file).read() or options.force:
            with open(file, "w") as f:
                f.write(cmake_file)
            Log.PrintResult(Result.NEW if not present else Result.UPDATE)
        else:
            Log.PrintResult(Result.ALREADY_DONE)

        base_cmake_subdirs += "add_subdirectory(" + cmake_dir + ")\n"

    Log.PrintBegin(" - Check {}".format(base_cmake_file.replace(KODI_DIR, "")))
    Log.PrintFollow(" (Hand edited file with auto part update)")

    cmake_file = ""
    f = open(base_cmake_file, "r")
    data = f.read()
    f.close()
    start = False
    for line in data.splitlines():
        if "---AUTO_GEN_PARSE<CMAKE_SUBDIRS>---" in line:
            cmake_file += line + "\n"
            start = True
        elif "---AUTO_GEN_PARSE<CMAKE_SUBDIRS_END>---" in line:
            cmake_file += base_cmake_subdirs
            cmake_file += line + "\n"
            start = False
        elif start:
            continue
        else:
            cmake_file += line + "\n"

    if cmake_file != data or options.force:
        with open(base_cmake_file, "w") as f:
            f.write(cmake_file)
        Log.PrintResult(Result.UPDATE)
    else:
        Log.PrintResult(Result.ALREADY_DONE)
