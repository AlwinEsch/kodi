from code_generator import *
from .tools.sub_file_hdl import *
from .tools.helpers import *

import glob, os, re, filecmp, shutil


class Generate_kodi_addon_instance_construct:
    """
    This class generate the code for following two interface functions within devkit lib.
     - CHdl_kodi_addon_base_h::kodi_addon_create_instance
     - CHdl_kodi_addon_base_h::kodi_addon_destroy_instance

    Becomes done to reduce hand work as for every instance type a copy of his function address
    structure is needed.

    NOTE: Maybe improve the whole ways to prevent this here?

    As usable class values are:
     - self.create_code for kodi_addon_create_instance
     - self.destroy_code for kodi_addon_destroy_instance
    """

    def __init__(self, options):
        self.options = options

        Log.PrintBegin("Generate instance create & destroy code within dev kit library ")

        search_dir = (
            "{}xbmc/addons/kodi-dev-kit/include/kodi/c-api/addon-instance/".format(
                KODI_DIR
            )
        )
        scan_dir = search_dir + "**/"

        instance_stucts = []
        src_parts = sorted(glob.glob(scan_dir + "*.h", recursive=True))
        for src_part in src_parts:
            if not FileContainsInterfaceAPICalls(src_part):
                continue

            with open(src_part) as f:
                file_text = f.read()
                f.close()

            if (
                not "_CREATE_V" in file_text or not "_DESTROY_V" in file_text
            ):  # a bit ugly check now
                continue

            value = src_part.replace(search_dir, "").replace(".h", "").replace("-", "")
            value_override = value
            if (
                not "PFN_KODI_ADDON_{}_CREATE_V;".format(value.upper()) in file_text
                and "PFN_KODI_ADDON_INSTANCE_CREATE_" in file_text
            ):
                value_override = "INSTANCE"

            instance_stucts.append((value, value_override))

        lowest_api = GetLowestUsedAPI()
        highest_api = GetHighestUsedAPI()
        Log.PrintFollow("(Used API, lowerst = {}, highest = {})".format(lowest_api, highest_api))

        Log.PrintResult(Result.SEE_BELOW)

        # ---------------------------------------------------------------------------
        # Generate part for "CHdl_kodi_addon_base_h::kodi_addon_create_instance"
        Log.PrintBegin(' - Generate part for: ')
        Log.PrintFollow('"CHdl_kodi_addon_base_h::kodi_addon_create_instance"')

        code = (
            "ADDON_STATUS dummy()\n{\n"
            '  // Autogenerated by "Generate_kodi_addon_instance_construct.py", edit this for code changes!\n'
            "  ADDON_STATUS status;\n"
            "  UnionAddonFunctions* data = reinterpret_cast<UnionAddonFunctions*>(hdl);\n"
            "  if (data->types.kodi_addon.v1.create_instance)\n"
            "  {\n"
            "    UnionAddonFunctions* instanceStruct = new UnionAddonFunctions();\n"
            "    instanceStruct->type = info->type;\n"
            "    instanceStruct->kodi = info->kodi;\n"
            "\n"
            "    KODI_ADDON_INSTANCE_STRUCT addonInstance;\n"
            "    addonInstance.dummy = &instanceStruct->types.dummy;\n"
            "\n"
            "    status = data->types.kodi_addon.v1.create_instance(data->hdl, info, &addonInstance);\n"
            "    if (!addonInstance.dummy && status == ADDON_STATUS_OK)\n"
            "    {\n"
            "      status = ADDON_STATUS_PERMANENT_FAILURE;\n"
            "    }\n"
            "    else if (addonInstance.dummy)\n"
            "    {\n"
        )

        for entry, value_override in instance_stucts:
            funcname = "kodi_addon_{}".format(entry)
            funcname_override = "kodi_addon_{}".format(value_override)
            filename = "{}xbmc/addons/kodi-dev-kit/include/kodi/c-api/addon-instance/{}.h".format(
                KODI_DIR, entry
            )

            if IsHighestUsedFunctionVersion(
                filename, funcname_override + "_create", "create", lowest_api
            ):
                code += (
                    "      if (info->type == ADDON_INSTANCE_{0})\n"
                    "      {{\n"
                    "            if (&instanceStruct->types.{1}.v{2} != reinterpret_cast<decltype(instanceStruct->types.{1}.v{2})*>(addonInstance.{3}))\n"
                    "              instanceStruct->types.{1}.v{2} = *reinterpret_cast<decltype(instanceStruct->types.{1}.v{2})*>(addonInstance.{3});\n"
                    "            if (instanceStruct->types.{1}.v{2}.create)\n"
                    "              instanceStruct->hdl = instanceStruct->types.{1}.v{2}.create(instance);\n"
                    "            else\n"
                    "              instanceStruct->hdl = addonInstance.hdl;\n"
                    "            goto done;\n"
                    "      }}\n"
                ).format(entry.upper(), funcname, lowest_api, entry)
            else:
                code += (
                    "      if (info->type == ADDON_INSTANCE_{0})\n"
                    "      {{\n"
                    "        switch (AddonIfc::g_ifc->api)\n"
                    "        {{\n"
                ).format(entry.upper())
                for i in range(highest_api, lowest_api - 1, -1):
                    code += "          case __KODI_API_{}__:\n".format(i)
                    if not IsLowerToUsedFunctionVersion(
                        filename, funcname_override + "_create", "create", i
                    ):
                        code += (
                            "          {{\n"
                            "            if (&instanceStruct->types.{0}.v{1} != reinterpret_cast<decltype(instanceStruct->types.{0}.v{1})*>(addonInstance.{2}))\n"
                            "              instanceStruct->types.{0}.v{1} = *reinterpret_cast<decltype(instanceStruct->types.{0}.v{1})*>(addonInstance.{2});\n"
                            "            if (instanceStruct->types.{0}.v{1}.create)\n"
                            "              instanceStruct->hdl = instanceStruct->types.{0}.v{1}.create(instance);\n"
                            "            else\n"
                            "              instanceStruct->hdl = addonInstance.hdl;\n"
                            "            goto done;\n"
                            "          }}\n"
                        ).format(funcname, i, entry)
                code += (
                    "        default:\n" "          break;\n" "        }\n" "      }\n"
                )
        code += (
            "    done:\n"
            "      *instance = instanceStruct;\n"
            "      return status;\n"
            "    }\n"
            "\n"
            "    delete instanceStruct;\n"
            "  }\n"
            "  else\n"
            "    status = ADDON_STATUS_NOT_IMPLEMENTED;\n"
            "\n"
            "  return status;\n"
            "}\n"
        )

        # Make temporary file for clang cleanup
        temp_file = "./tmp/addon-instance/Generate_kodi_addon_create_instance.cpp"
        if not write_file(temp_file, code, True):
            Log.PrintResult(Result.FAILURE)
            Log.PrintFatal("Error: {}".format(code_generator.LAST_ERROR))
            exit(1)

        code = read_file(temp_file)
        if not code:
            Log.PrintResult(Result.FAILURE)
            Log.PrintFatal("Error: {}".format(code_generator.LAST_ERROR))
            exit(1)

        self.create_code = code.split("\n", 2)[2].rsplit("\n", 2)[0]
        Log.PrintResult(Result.OK)

        # ---------------------------------------------------------------------------
        # Generate part for "CHdl_kodi_addon_base_h::kodi_addon_destroy_instance"

        Log.PrintBegin(' - Generate part for: ')
        Log.PrintFollow('"CHdl_kodi_addon_base_h::kodi_addon_destroy_instance"')

        code = (
            "void dummy()\n{\n"
            '  // Autogenerated by "Generate_kodi_addon_instance_construct.py", edit this for code changes!\n'
            "  UnionAddonFunctions* data = reinterpret_cast<UnionAddonFunctions*>(hdl);\n"
            "  UnionAddonFunctions* instanceStruct = reinterpret_cast<UnionAddonFunctions*>(instance);\n"
            "  if (instanceStruct)\n"
            "  {\n"
        )

        for entry, value_override in instance_stucts:
            funcname = "kodi_addon_{}".format(entry)
            funcname_override = "kodi_addon_{}".format(value_override)
            filename = "{}xbmc/addons/kodi-dev-kit/include/kodi/c-api/addon-instance/{}.h".format(
                KODI_DIR, entry
            )

            if IsHighestUsedFunctionVersion(
                filename, funcname_override + "_destroy", "destroy", lowest_api
            ):
                code += (
                    "    if (info->type == ADDON_INSTANCE_{0})\n"
                    "    {{\n"
                    "      if (instanceStruct->types.{1}.v{2}.destroy)\n"
                    "        instanceStruct->types.{1}.v{2}.destroy(instanceStruct->hdl);\n"
                    "      goto done;\n"
                    "    }}\n"
                ).format(entry.upper(), funcname, lowest_api)
            else:
                code += (
                    "    if (info->type == ADDON_INSTANCE_{})\n"
                    "    {{\n"
                    "      switch (AddonIfc::g_ifc->api)\n"
                    "      {{\n"
                ).format(entry.upper())
                for i in range(highest_api, lowest_api - 1, -1):
                    code += "        case __KODI_API_{}__:\n".format(i)
                    if not IsLowerToUsedFunctionVersion(
                        filename, funcname_override + "_destroy", "destroy", i
                    ):
                        code += (
                            "        {{\n"
                            "          if (instanceStruct->types.{0}.v{1}.destroy)\n"
                            "            instanceStruct->types.{0}.v{1}.destroy(instanceStruct->hdl);\n"
                            "          goto done;\n"
                            "        }}\n"
                        ).format(funcname, i)
                code += "\n" "      default:\n" "        break;\n" "      }\n" "    }\n"

        code += (
            "  done:\n"
            "    if (data->types.kodi_addon.v1.destroy_instance)\n"
            "    {\n"
            "      data->types.kodi_addon.v1.destroy_instance(data->hdl, info, instanceStruct->hdl);\n"
            "    }\n"
            "    delete instanceStruct;\n"
            "  }\n"
            "}\n"
        )

        # Make temporary file for clang cleanup
        temp_file = "./tmp/addon-instance/Generate_kodi_addon_destroy_instance.cpp"
        if not write_file(temp_file, code, True):
            Log.PrintResult(Result.FAILURE)
            Log.PrintFatal("Error: {}".format(code_generator.LAST_ERROR))
            exit(1)

        code = read_file(temp_file)
        if not code:
            Log.PrintResult(Result.FAILURE)
            Log.PrintFatal("Error: {}".format(code_generator.LAST_ERROR))
            exit(1)

        self.destroy_code = code.split("\n", 2)[2].rsplit("\n", 2)[0]
        Log.PrintResult(Result.OK)
